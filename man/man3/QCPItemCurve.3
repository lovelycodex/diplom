.TH "QCPItemCurve" 3 "Thu Jun 18 2015" "Version v.2" "Voice analyze" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPItemCurve \- A curved line from one point to another\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPItemCurve\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "QPen \fBpen\fP () const "
.br
.ti -1c
.RI "QPen \fBselectedPen\fP () const "
.br
.ti -1c
.RI "\fBQCPLineEnding\fP \fBhead\fP () const "
.br
.ti -1c
.RI "\fBQCPLineEnding\fP \fBtail\fP () const "
.br
.ti -1c
.RI "void \fBsetPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetSelectedPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetHead\fP (const \fBQCPLineEnding\fP &head)"
.br
.ti -1c
.RI "void \fBsetTail\fP (const \fBQCPLineEnding\fP &tail)"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const "
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBQCPItemPosition\fP *const \fBstart\fP"
.br
.ti -1c
.RI "\fBQCPItemPosition\fP *const \fBstartDir\fP"
.br
.ti -1c
.RI "\fBQCPItemPosition\fP *const \fBendDir\fP"
.br
.ti -1c
.RI "\fBQCPItemPosition\fP *const \fBend\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter)"
.br
.ti -1c
.RI "QPen \fBmainPen\fP () const "
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "QPen \fBmPen\fP"
.br
.ti -1c
.RI "QPen \fBmSelectedPen\fP"
.br
.ti -1c
.RI "\fBQCPLineEnding\fP \fBmHead\fP"
.br
.ti -1c
.RI "\fBQCPLineEnding\fP \fBmTail\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
A curved line from one point to another\&. 

Curve example\&. Blue dotted circles are anchors, solid blue discs are positions\&. It has four positions, \fIstart\fP and \fIend\fP, which define the end points of the line, and two control points which define the direction the line exits from the start and the direction from which it approaches the end: \fIstartDir\fP and \fIendDir\fP\&.
.PP
With \fBsetHead\fP and \fBsetTail\fP you may set different line ending styles, e\&.g\&. to create an arrow\&.
.PP
Often it is desirable for the control points to stay at fixed relative positions to the start/end point\&. This can be achieved by setting the parent anchor e\&.g\&. of \fIstartDir\fP simply to \fIstart\fP, and then specify the desired pixel offset with \fBQCPItemPosition::setCoords\fP on \fIstartDir\fP\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPItemCurve::QCPItemCurve (\fBQCustomPlot\fP * parentPlot)"
Creates a curve item and sets default values\&.
.PP
The constructed item can be added to the plot with \fBQCustomPlot::addItem\fP\&. 
.SH "Member Function Documentation"
.PP 
.SS "double QCPItemCurve::selectTest (const QPointF & pos, bool onlySelectable, QVariant * details = \fC0\fP) const\fC [virtual]\fP"
This function is used to decide whether a click hits a layerable object or not\&.
.PP
\fIpos\fP is a point in pixel coordinates on the \fBQCustomPlot\fP surface\&. This function returns the shortest pixel distance of this point to the object\&. If the object is either invisible or the distance couldn't be determined, -1\&.0 is returned\&. Further, if \fIonlySelectable\fP is true and the object is not selectable, -1\&.0 is returned, too\&.
.PP
If the object is represented not by single lines but by an area like a \fBQCPItemText\fP or the bars of a \fBQCPBars\fP plottable, a click inside the area should also be considered a hit\&. In these cases this function thus returns a constant value greater zero but still below the parent plot's selection tolerance\&. (typically the selectionTolerance multiplied by 0\&.99)\&.
.PP
Providing a constant value for area objects allows selecting line objects even when they are obscured by such area objects, by clicking close to the lines (i\&.e\&. closer than 0\&.99*selectionTolerance)\&.
.PP
The actual setting of the selection state is not done by this function\&. This is handled by the parent \fBQCustomPlot\fP when the mouseReleaseEvent occurs, and the finally selected object is notified via the selectEvent/deselectEvent methods\&.
.PP
\fIdetails\fP is an optional output parameter\&. Every layerable subclass may place any information in \fIdetails\fP\&. This information will be passed to \fBselectEvent\fP when the parent \fBQCustomPlot\fP decides on the basis of this selectTest call, that the object was successfully selected\&. The subsequent call to \fBselectEvent\fP will carry the \fIdetails\fP\&. This is useful for multi-part objects (like \fBQCPAxis\fP)\&. This way, a possibly complex calculation to decide which part was clicked is only done once in \fBselectTest\fP\&. The result (i\&.e\&. the actually clicked part) can then be placed in \fIdetails\fP\&. So in the subsequent \fBselectEvent\fP, the decision which part was selected doesn't have to be done a second time for a single selection operation\&.
.PP
You may pass 0 as \fIdetails\fP to indicate that you are not interested in those selection details\&.
.PP
\fBSee also:\fP
.RS 4
selectEvent, deselectEvent, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.PP
Implements \fBQCPAbstractItem\fP\&.
.SS "void QCPItemCurve::setHead (const \fBQCPLineEnding\fP & head)"
Sets the line ending style of the head\&. The head corresponds to the \fIend\fP position\&.
.PP
Note that due to the overloaded \fBQCPLineEnding\fP constructor, you may directly specify a \fBQCPLineEnding::EndingStyle\fP here, e\&.g\&.
.PP
.nf
setHead(QCPLineEnding::esSpikeArrow) 

.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBsetTail\fP 
.RE
.PP

.SS "void QCPItemCurve::setPen (const QPen & pen)"
Sets the pen that will be used to draw the line
.PP
\fBSee also:\fP
.RS 4
\fBsetSelectedPen\fP 
.RE
.PP

.SS "void QCPItemCurve::setSelectedPen (const QPen & pen)"
Sets the pen that will be used to draw the line when selected
.PP
\fBSee also:\fP
.RS 4
\fBsetPen\fP, \fBsetSelected\fP 
.RE
.PP

.SS "void QCPItemCurve::setTail (const \fBQCPLineEnding\fP & tail)"
Sets the line ending style of the tail\&. The tail corresponds to the \fIstart\fP position\&.
.PP
Note that due to the overloaded \fBQCPLineEnding\fP constructor, you may directly specify a \fBQCPLineEnding::EndingStyle\fP here, e\&.g\&.
.PP
.nf
setTail(QCPLineEnding::esSpikeArrow) 

.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBsetHead\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Voice analyze from the source code\&.
