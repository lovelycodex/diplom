.TH "QCPLayerable" 3 "Thu Jun 18 2015" "Version v.2" "Voice analyze" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPLayerable \- Base class for all drawable objects\&.  

.SH SYNOPSIS
.br
.PP
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBlayerChanged\fP (\fBQCPLayer\fP *newLayer)"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPLayerable\fP (\fBQCustomPlot\fP *plot, QString targetLayer=QString(), \fBQCPLayerable\fP *\fBparentLayerable\fP=0)"
.br
.ti -1c
.RI "bool \fBvisible\fP () const "
.br
.ti -1c
.RI "\fBQCustomPlot\fP * \fBparentPlot\fP () const "
.br
.ti -1c
.RI "\fBQCPLayerable\fP * \fBparentLayerable\fP () const "
.br
.ti -1c
.RI "\fBQCPLayer\fP * \fBlayer\fP () const "
.br
.ti -1c
.RI "bool \fBantialiased\fP () const "
.br
.ti -1c
.RI "void \fBsetVisible\fP (bool on)"
.br
.ti -1c
.RI "Q_SLOT bool \fBsetLayer\fP (\fBQCPLayer\fP *layer)"
.br
.ti -1c
.RI "bool \fBsetLayer\fP (const QString &layerName)"
.br
.ti -1c
.RI "void \fBsetAntialiased\fP (bool enabled)"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const "
.br
.ti -1c
.RI "bool \fBrealVisibility\fP () const "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBparentPlotInitialized\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "virtual \fBQCP::Interaction\fP \fBselectionCategory\fP () const "
.br
.ti -1c
.RI "virtual QRect \fBclipRect\fP () const "
.br
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const =0"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter)=0"
.br
.ti -1c
.RI "virtual void \fBselectEvent\fP (QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged)"
.br
.ti -1c
.RI "virtual void \fBdeselectEvent\fP (bool *selectionStateChanged)"
.br
.ti -1c
.RI "void \fBinitializeParentPlot\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "void \fBsetParentLayerable\fP (\fBQCPLayerable\fP *\fBparentLayerable\fP)"
.br
.ti -1c
.RI "bool \fBmoveToLayer\fP (\fBQCPLayer\fP *layer, bool prepend)"
.br
.ti -1c
.RI "void \fBapplyAntialiasingHint\fP (\fBQCPPainter\fP *painter, bool localAntialiased, \fBQCP::AntialiasedElement\fP overrideElement) const "
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "bool \fBmVisible\fP"
.br
.ti -1c
.RI "\fBQCustomPlot\fP * \fBmParentPlot\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPLayerable\fP > \fBmParentLayerable\fP"
.br
.ti -1c
.RI "\fBQCPLayer\fP * \fBmLayer\fP"
.br
.ti -1c
.RI "bool \fBmAntialiased\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBQCustomPlot\fP"
.br
.ti -1c
.RI "class \fBQCPAxisRect\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Base class for all drawable objects\&. 

This is the abstract base class most visible objects derive from, e\&.g\&. plottables, axes, grid etc\&.
.PP
Every layerable is on a layer (\fBQCPLayer\fP) which allows controlling the rendering order by stacking the layers accordingly\&.
.PP
For details about the layering mechanism, see the \fBQCPLayer\fP documentation\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPLayerable::QCPLayerable (\fBQCustomPlot\fP * plot, QString targetLayer = \fCQString()\fP, \fBQCPLayerable\fP * parentLayerable = \fC0\fP)"
Creates a new \fBQCPLayerable\fP instance\&.
.PP
Since \fBQCPLayerable\fP is an abstract base class, it can't be instantiated directly\&. Use one of the derived classes\&.
.PP
If \fIplot\fP is provided, it automatically places itself on the layer named \fItargetLayer\fP\&. If \fItargetLayer\fP is an empty string, it places itself on the current layer of the plot (see \fBQCustomPlot::setCurrentLayer\fP)\&.
.PP
It is possible to provide 0 as \fIplot\fP\&. In that case, you should assign a parent plot at a later time with \fBinitializeParentPlot\fP\&.
.PP
The layerable's parent layerable is set to \fIparentLayerable\fP, if provided\&. Direct layerable parents are mainly used to control visibility in a hierarchy of layerables\&. This means a layerable is only drawn, if all its ancestor layerables are also visible\&. Note that \fIparentLayerable\fP does not become the QObject-parent (for memory management) of this layerable, \fIplot\fP does\&. 
.SH "Member Function Documentation"
.PP 
.SS "void QCPLayerable::layerChanged (\fBQCPLayer\fP * newLayer)\fC [signal]\fP"
This signal is emitted when the layer of this layerable changes, i\&.e\&. this layerable is moved to a different layer\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetLayer\fP 
.RE
.PP

.SS "\fBQCPLayerable\fP * QCPLayerable::parentLayerable () const\fC [inline]\fP"
Returns the parent layerable of this layerable\&. The parent layerable is used to provide visibility hierarchies in conjunction with the method \fBrealVisibility\fP\&. This way, layerables only get drawn if their parent layerables are visible, too\&.
.PP
Note that a parent layerable is not necessarily also the QObject parent for memory management\&. Further, a layerable doesn't always have a parent layerable, so this function may return 0\&.
.PP
A parent layerable is set implicitly with when placed inside layout elements and doesn't need to be set manually by the user\&. 
.SS "bool QCPLayerable::realVisibility () const"
Returns whether this layerable is visible, taking the visibility of the layerable parent and the visibility of the layer this layerable is on into account\&. This is the method that is consulted to decide whether a layerable shall be drawn or not\&.
.PP
If this layerable has a direct layerable parent (usually set via hierarchies implemented in subclasses, like in the case of \fBQCPLayoutElement\fP), this function returns true only if this layerable has its visibility set to true and the parent layerable's \fBrealVisibility\fP returns true\&.
.PP
If this layerable doesn't have a direct layerable parent, returns the state of this layerable's visibility\&. 
.SS "double QCPLayerable::selectTest (const QPointF & pos, bool onlySelectable, QVariant * details = \fC0\fP) const\fC [virtual]\fP"
This function is used to decide whether a click hits a layerable object or not\&.
.PP
\fIpos\fP is a point in pixel coordinates on the \fBQCustomPlot\fP surface\&. This function returns the shortest pixel distance of this point to the object\&. If the object is either invisible or the distance couldn't be determined, -1\&.0 is returned\&. Further, if \fIonlySelectable\fP is true and the object is not selectable, -1\&.0 is returned, too\&.
.PP
If the object is represented not by single lines but by an area like a \fBQCPItemText\fP or the bars of a \fBQCPBars\fP plottable, a click inside the area should also be considered a hit\&. In these cases this function thus returns a constant value greater zero but still below the parent plot's selection tolerance\&. (typically the selectionTolerance multiplied by 0\&.99)\&.
.PP
Providing a constant value for area objects allows selecting line objects even when they are obscured by such area objects, by clicking close to the lines (i\&.e\&. closer than 0\&.99*selectionTolerance)\&.
.PP
The actual setting of the selection state is not done by this function\&. This is handled by the parent \fBQCustomPlot\fP when the mouseReleaseEvent occurs, and the finally selected object is notified via the selectEvent/deselectEvent methods\&.
.PP
\fIdetails\fP is an optional output parameter\&. Every layerable subclass may place any information in \fIdetails\fP\&. This information will be passed to \fBselectEvent\fP when the parent \fBQCustomPlot\fP decides on the basis of this selectTest call, that the object was successfully selected\&. The subsequent call to \fBselectEvent\fP will carry the \fIdetails\fP\&. This is useful for multi-part objects (like \fBQCPAxis\fP)\&. This way, a possibly complex calculation to decide which part was clicked is only done once in \fBselectTest\fP\&. The result (i\&.e\&. the actually clicked part) can then be placed in \fIdetails\fP\&. So in the subsequent \fBselectEvent\fP, the decision which part was selected doesn't have to be done a second time for a single selection operation\&.
.PP
You may pass 0 as \fIdetails\fP to indicate that you are not interested in those selection details\&.
.PP
\fBSee also:\fP
.RS 4
selectEvent, deselectEvent, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.PP
Reimplemented in \fBQCPItemBracket\fP, \fBQCPItemTracer\fP, \fBQCPItemPixmap\fP, \fBQCPItemEllipse\fP, \fBQCPItemText\fP, \fBQCPItemRect\fP, \fBQCPItemCurve\fP, \fBQCPItemLine\fP, \fBQCPItemStraightLine\fP, \fBQCPFinancial\fP, \fBQCPColorMap\fP, \fBQCPStatisticalBox\fP, \fBQCPBars\fP, \fBQCPCurve\fP, \fBQCPGraph\fP, \fBQCPPlotTitle\fP, \fBQCPLegend\fP, \fBQCPAbstractLegendItem\fP, \fBQCPAbstractItem\fP, \fBQCPAbstractPlottable\fP, \fBQCPAxis\fP, \fBQCPLayoutInset\fP, and \fBQCPLayoutElement\fP\&.
.SS "void QCPLayerable::setAntialiased (bool enabled)"
Sets whether this object will be drawn antialiased or not\&.
.PP
Note that antialiasing settings may be overridden by \fBQCustomPlot::setAntialiasedElements\fP and \fBQCustomPlot::setNotAntialiasedElements\fP\&. 
.SS "bool QCPLayerable::setLayer (\fBQCPLayer\fP * layer)"
Sets the \fIlayer\fP of this layerable object\&. The object will be placed on top of the other objects already on \fIlayer\fP\&.
.PP
Returns true on success, i\&.e\&. if \fIlayer\fP is a valid layer\&. 
.SS "bool QCPLayerable::setLayer (const QString & layerName)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Sets the layer of this layerable object by name
.PP
Returns true on success, i\&.e\&. if \fIlayerName\fP is a valid layer name\&. 
.SS "void QCPLayerable::setVisible (bool on)"
Sets the visibility of this layerable object\&. If an object is not visible, it will not be drawn on the \fBQCustomPlot\fP surface, and user interaction with it (e\&.g\&. click and selection) is not possible\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Voice analyze from the source code\&.
