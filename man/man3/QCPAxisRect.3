.TH "QCPAxisRect" 3 "Thu Jun 18 2015" "Version v.2" "Voice analyze" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPAxisRect \- Holds multiple axes and arranges them in a rectangular shape\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPAxisRect\fP (\fBQCustomPlot\fP *parentPlot, bool setupDefaultAxes=true)"
.br
.ti -1c
.RI "QPixmap \fBbackground\fP () const "
.br
.ti -1c
.RI "bool \fBbackgroundScaled\fP () const "
.br
.ti -1c
.RI "Qt::AspectRatioMode \fBbackgroundScaledMode\fP () const "
.br
.ti -1c
.RI "Qt::Orientations \fBrangeDrag\fP () const "
.br
.ti -1c
.RI "Qt::Orientations \fBrangeZoom\fP () const "
.br
.ti -1c
.RI "\fBQCPAxis\fP * \fBrangeDragAxis\fP (Qt::Orientation orientation)"
.br
.ti -1c
.RI "\fBQCPAxis\fP * \fBrangeZoomAxis\fP (Qt::Orientation orientation)"
.br
.ti -1c
.RI "double \fBrangeZoomFactor\fP (Qt::Orientation orientation)"
.br
.ti -1c
.RI "void \fBsetBackground\fP (const QPixmap &pm)"
.br
.ti -1c
.RI "void \fBsetBackground\fP (const QPixmap &pm, bool scaled, Qt::AspectRatioMode mode=Qt::KeepAspectRatioByExpanding)"
.br
.ti -1c
.RI "void \fBsetBackground\fP (const QBrush &brush)"
.br
.ti -1c
.RI "void \fBsetBackgroundScaled\fP (bool scaled)"
.br
.ti -1c
.RI "void \fBsetBackgroundScaledMode\fP (Qt::AspectRatioMode mode)"
.br
.ti -1c
.RI "void \fBsetRangeDrag\fP (Qt::Orientations orientations)"
.br
.ti -1c
.RI "void \fBsetRangeZoom\fP (Qt::Orientations orientations)"
.br
.ti -1c
.RI "void \fBsetRangeDragAxes\fP (\fBQCPAxis\fP *horizontal, \fBQCPAxis\fP *vertical)"
.br
.ti -1c
.RI "void \fBsetRangeZoomAxes\fP (\fBQCPAxis\fP *horizontal, \fBQCPAxis\fP *vertical)"
.br
.ti -1c
.RI "void \fBsetRangeZoomFactor\fP (double horizontalFactor, double verticalFactor)"
.br
.ti -1c
.RI "void \fBsetRangeZoomFactor\fP (double factor)"
.br
.ti -1c
.RI "int \fBaxisCount\fP (\fBQCPAxis::AxisType\fP type) const "
.br
.ti -1c
.RI "\fBQCPAxis\fP * \fBaxis\fP (\fBQCPAxis::AxisType\fP type, int index=0) const "
.br
.ti -1c
.RI "QList< \fBQCPAxis\fP * > \fBaxes\fP (QCPAxis::AxisTypes types) const "
.br
.ti -1c
.RI "QList< \fBQCPAxis\fP * > \fBaxes\fP () const "
.br
.ti -1c
.RI "\fBQCPAxis\fP * \fBaddAxis\fP (\fBQCPAxis::AxisType\fP type, \fBQCPAxis\fP *\fBaxis\fP=0)"
.br
.ti -1c
.RI "QList< \fBQCPAxis\fP * > \fBaddAxes\fP (QCPAxis::AxisTypes types)"
.br
.ti -1c
.RI "bool \fBremoveAxis\fP (\fBQCPAxis\fP *\fBaxis\fP)"
.br
.ti -1c
.RI "\fBQCPLayoutInset\fP * \fBinsetLayout\fP () const "
.br
.ti -1c
.RI "void \fBsetupFullAxesBox\fP (bool connectRanges=false)"
.br
.ti -1c
.RI "QList< \fBQCPAbstractPlottable\fP * > \fBplottables\fP () const "
.br
.ti -1c
.RI "QList< \fBQCPGraph\fP * > \fBgraphs\fP () const "
.br
.ti -1c
.RI "QList< \fBQCPAbstractItem\fP * > \fBitems\fP () const "
.br
.ti -1c
.RI "int \fBleft\fP () const "
.br
.ti -1c
.RI "int \fBright\fP () const "
.br
.ti -1c
.RI "int \fBtop\fP () const "
.br
.ti -1c
.RI "int \fBbottom\fP () const "
.br
.ti -1c
.RI "int \fBwidth\fP () const "
.br
.ti -1c
.RI "int \fBheight\fP () const "
.br
.ti -1c
.RI "QSize \fBsize\fP () const "
.br
.ti -1c
.RI "QPoint \fBtopLeft\fP () const "
.br
.ti -1c
.RI "QPoint \fBtopRight\fP () const "
.br
.ti -1c
.RI "QPoint \fBbottomLeft\fP () const "
.br
.ti -1c
.RI "QPoint \fBbottomRight\fP () const "
.br
.ti -1c
.RI "QPoint \fBcenter\fP () const "
.br
.ti -1c
.RI "virtual void \fBupdate\fP (\fBUpdatePhase\fP phase)"
.br
.ti -1c
.RI "virtual QList< \fBQCPLayoutElement\fP * > \fBelements\fP (bool recursive) const "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const "
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter)"
.br
.ti -1c
.RI "virtual int \fBcalculateAutoMargin\fP (\fBQCP::MarginSide\fP side)"
.br
.ti -1c
.RI "virtual void \fBmousePressEvent\fP (QMouseEvent *event)"
.br
.ti -1c
.RI "virtual void \fBmouseMoveEvent\fP (QMouseEvent *event)"
.br
.ti -1c
.RI "virtual void \fBmouseReleaseEvent\fP (QMouseEvent *event)"
.br
.ti -1c
.RI "virtual void \fBwheelEvent\fP (QWheelEvent *event)"
.br
.ti -1c
.RI "void \fBdrawBackground\fP (\fBQCPPainter\fP *painter)"
.br
.ti -1c
.RI "void \fBupdateAxesOffset\fP (\fBQCPAxis::AxisType\fP type)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "QBrush \fBmBackgroundBrush\fP"
.br
.ti -1c
.RI "QPixmap \fBmBackgroundPixmap\fP"
.br
.ti -1c
.RI "QPixmap \fBmScaledBackgroundPixmap\fP"
.br
.ti -1c
.RI "bool \fBmBackgroundScaled\fP"
.br
.ti -1c
.RI "Qt::AspectRatioMode \fBmBackgroundScaledMode\fP"
.br
.ti -1c
.RI "\fBQCPLayoutInset\fP * \fBmInsetLayout\fP"
.br
.ti -1c
.RI "Qt::Orientations \fBmRangeDrag\fP"
.br
.ti -1c
.RI "Qt::Orientations \fBmRangeZoom\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPAxis\fP > \fBmRangeDragHorzAxis\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPAxis\fP > \fBmRangeDragVertAxis\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPAxis\fP > \fBmRangeZoomHorzAxis\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPAxis\fP > \fBmRangeZoomVertAxis\fP"
.br
.ti -1c
.RI "double \fBmRangeZoomFactorHorz\fP"
.br
.ti -1c
.RI "double \fBmRangeZoomFactorVert\fP"
.br
.ti -1c
.RI "\fBQCPRange\fP \fBmDragStartHorzRange\fP"
.br
.ti -1c
.RI "\fBQCPRange\fP \fBmDragStartVertRange\fP"
.br
.ti -1c
.RI "QCP::AntialiasedElements \fBmAADragBackup\fP"
.br
.ti -1c
.RI "QCP::AntialiasedElements \fBmNotAADragBackup\fP"
.br
.ti -1c
.RI "QPoint \fBmDragStart\fP"
.br
.ti -1c
.RI "bool \fBmDragging\fP"
.br
.ti -1c
.RI "QHash< \fBQCPAxis::AxisType\fP, QList< \fBQCPAxis\fP * > > \fBmAxes\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBQCustomPlot\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Holds multiple axes and arranges them in a rectangular shape\&. 

This class represents an axis rect, a rectangular area that is bounded on all sides with an arbitrary number of axes\&.
.PP
Initially \fBQCustomPlot\fP has one axis rect, accessible via \fBQCustomPlot::axisRect()\fP\&. However, the layout system allows to have multiple axis rects, e\&.g\&. arranged in a grid layout (\fBQCustomPlot::plotLayout\fP)\&.
.PP
By default, \fBQCPAxisRect\fP comes with four axes, at bottom, top, left and right\&. They can be accessed via \fBaxis\fP by providing the respective axis type (\fBQCPAxis::AxisType\fP) and index\&. If you need all axes in the axis rect, use \fBaxes\fP\&. The top and right axes are set to be invisible initially (\fBQCPAxis::setVisible\fP)\&. To add more axes to a side, use \fBaddAxis\fP or \fBaddAxes\fP\&. To remove an axis, use \fBremoveAxis\fP\&.
.PP
The axis rect layerable itself only draws a background pixmap or color, if specified (\fBsetBackground\fP)\&. It is placed on the 'background' layer initially (see \fBQCPLayer\fP for an explanation of the \fBQCustomPlot\fP layer system)\&. The axes that are held by the axis rect can be placed on other layers, independently of the axis rect\&.
.PP
Every axis rect has a child layout of type \fBQCPLayoutInset\fP\&. It is accessible via \fBinsetLayout\fP and can be used to have other layout elements (or even other layouts with multiple elements) hovering inside the axis rect\&.
.PP
If an axis rect is clicked and dragged, it processes this by moving certain axis ranges\&. The behaviour can be controlled with \fBsetRangeDrag\fP and \fBsetRangeDragAxes\fP\&. If the mouse wheel is scrolled while the cursor is on the axis rect, certain axes are scaled\&. This is controllable via \fBsetRangeZoom\fP, \fBsetRangeZoomAxes\fP and \fBsetRangeZoomFactor\fP\&. These interactions are only enabled if \fBQCustomPlot::setInteractions\fP contains \fBQCP::iRangeDrag\fP and \fBQCP::iRangeZoom\fP\&.
.PP
 Overview of the spacings and paddings that define the geometry of an axis\&. The dashed line on the far left indicates the viewport/widget border\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPAxisRect::QCPAxisRect (\fBQCustomPlot\fP * parentPlot, bool setupDefaultAxes = \fCtrue\fP)\fC [explicit]\fP"
Creates a \fBQCPAxisRect\fP instance and sets default values\&. An axis is added for each of the four sides, the top and right axes are set invisible initially\&. 
.SH "Member Function Documentation"
.PP 
.SS "QList< \fBQCPAxis\fP * > QCPAxisRect::addAxes (QCPAxis::AxisTypes types)"
Adds a new axis with \fBaddAxis\fP to each axis rect side specified in \fItypes\fP\&. This may be an \fCor\fP-combination of \fBQCPAxis::AxisType\fP, so axes can be added to multiple sides at once\&.
.PP
Returns a list of the added axes\&.
.PP
\fBSee also:\fP
.RS 4
\fBaddAxis\fP, \fBsetupFullAxesBox\fP 
.RE
.PP

.SS "\fBQCPAxis\fP * QCPAxisRect::addAxis (\fBQCPAxis::AxisType\fP type, \fBQCPAxis\fP * axis = \fC0\fP)"
Adds a new axis to the axis rect side specified with \fItype\fP, and returns it\&. If \fIaxis\fP is 0, a new \fBQCPAxis\fP instance is created internally\&.
.PP
You may inject \fBQCPAxis\fP instances (or sublasses of \fBQCPAxis\fP) by setting \fIaxis\fP to an axis that was previously created outside \fBQCustomPlot\fP\&. It is important to note that \fBQCustomPlot\fP takes ownership of the axis, so you may not delete it afterwards\&. Further, the \fIaxis\fP must have been created with this axis rect as parent and with the same axis type as specified in \fItype\fP\&. If this is not the case, a debug output is generated, the axis is not added, and the method returns 0\&.
.PP
This method can not be used to move \fIaxis\fP between axis rects\&. The same \fIaxis\fP instance must not be added multiple times to the same or different axis rects\&.
.PP
If an axis rect side already contains one or more axes, the lower and upper endings of the new axis (\fBQCPAxis::setLowerEnding\fP, \fBQCPAxis::setUpperEnding\fP) are set to \fBQCPLineEnding::esHalfBar\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBaddAxes\fP, \fBsetupFullAxesBox\fP 
.RE
.PP

.SS "QList< \fBQCPAxis\fP * > QCPAxisRect::axes (QCPAxis::AxisTypes types) const"
Returns all axes on the axis rect sides specified with \fItypes\fP\&.
.PP
\fItypes\fP may be a single \fBQCPAxis::AxisType\fP or an \fCor\fP-combination, to get the axes of multiple sides\&.
.PP
\fBSee also:\fP
.RS 4
\fBaxis\fP 
.RE
.PP

.SS "QList< \fBQCPAxis\fP * > QCPAxisRect::axes () const"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Returns all axes of this axis rect\&. 
.SS "\fBQCPAxis\fP * QCPAxisRect::axis (\fBQCPAxis::AxisType\fP type, int index = \fC0\fP) const"
Returns the axis with the given \fIindex\fP on the axis rect side specified with \fItype\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBaxisCount\fP, \fBaxes\fP 
.RE
.PP

.SS "int QCPAxisRect::axisCount (\fBQCPAxis::AxisType\fP type) const"
Returns the number of axes on the axis rect side specified with \fItype\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBaxis\fP 
.RE
.PP

.SS "int QCPAxisRect::bottom () const\fC [inline]\fP"
Returns the pixel position of the bottom border of this axis rect\&. Margins are not taken into account here, so the returned value is with respect to the inner \fBrect\fP\&. 
.SS "QPoint QCPAxisRect::bottomLeft () const\fC [inline]\fP"
Returns the bottom left corner of this axis rect in pixels\&. Margins are not taken into account here, so the returned value is with respect to the inner \fBrect\fP\&. 
.SS "QPoint QCPAxisRect::bottomRight () const\fC [inline]\fP"
Returns the bottom right corner of this axis rect in pixels\&. Margins are not taken into account here, so the returned value is with respect to the inner \fBrect\fP\&. 
.SS "QPoint QCPAxisRect::center () const\fC [inline]\fP"
Returns the center of this axis rect in pixels\&. Margins are not taken into account here, so the returned value is with respect to the inner \fBrect\fP\&. 
.SS "QList< \fBQCPLayoutElement\fP * > QCPAxisRect::elements (bool recursive) const\fC [virtual]\fP"
Returns a list of all child elements in this layout element\&. If \fIrecursive\fP is true, all sub-child elements are included in the list, too\&.
.PP
\fBWarning:\fP
.RS 4
There may be entries with value 0 in the returned list\&. (For example, \fBQCPLayoutGrid\fP may have empty cells which yield 0 at the respective index\&.) 
.RE
.PP

.PP
Reimplemented from \fBQCPLayoutElement\fP\&.
.SS "QList< \fBQCPGraph\fP * > QCPAxisRect::graphs () const"
Returns a list of all the graphs that are associated with this axis rect\&.
.PP
A graph is considered associated with an axis rect if its key or value axis (or both) is in this axis rect\&.
.PP
\fBSee also:\fP
.RS 4
\fBplottables\fP, \fBitems\fP 
.RE
.PP

.SS "int QCPAxisRect::height () const\fC [inline]\fP"
Returns the pixel height of this axis rect\&. Margins are not taken into account here, so the returned value is with respect to the inner \fBrect\fP\&. 
.SS "\fBQCPLayoutInset\fP * QCPAxisRect::insetLayout () const\fC [inline]\fP"
Returns the inset layout of this axis rect\&. It can be used to place other layout elements (or even layouts with multiple other elements) inside/on top of an axis rect\&.
.PP
\fBSee also:\fP
.RS 4
\fBQCPLayoutInset\fP 
.RE
.PP

.SS "QList< \fBQCPAbstractItem\fP * > QCPAxisRect::items () const"
Returns a list of all the items that are associated with this axis rect\&.
.PP
An item is considered associated with an axis rect if any of its positions has key or value axis set to an axis that is in this axis rect, or if any of its positions has \fBQCPItemPosition::setAxisRect\fP set to the axis rect, or if the clip axis rect (\fBQCPAbstractItem::setClipAxisRect\fP) is set to this axis rect\&.
.PP
\fBSee also:\fP
.RS 4
\fBplottables\fP, \fBgraphs\fP 
.RE
.PP

.SS "int QCPAxisRect::left () const\fC [inline]\fP"
Returns the pixel position of the left border of this axis rect\&. Margins are not taken into account here, so the returned value is with respect to the inner \fBrect\fP\&. 
.SS "void QCPAxisRect::mouseMoveEvent (QMouseEvent * event)\fC [protected]\fP, \fC [virtual]\fP"
This event is called, if the mouse is moved inside the outer rect of this layout element\&. 
.PP
Reimplemented from \fBQCPLayoutElement\fP\&.
.SS "void QCPAxisRect::mousePressEvent (QMouseEvent * event)\fC [protected]\fP, \fC [virtual]\fP"
This event is called, if the mouse was pressed while being inside the outer rect of this layout element\&. 
.PP
Reimplemented from \fBQCPLayoutElement\fP\&.
.SS "void QCPAxisRect::mouseReleaseEvent (QMouseEvent * event)\fC [protected]\fP, \fC [virtual]\fP"
This event is called, if the mouse was previously pressed inside the outer rect of this layout element and is now released\&. 
.PP
Reimplemented from \fBQCPLayoutElement\fP\&.
.SS "QList< \fBQCPAbstractPlottable\fP * > QCPAxisRect::plottables () const"
Returns a list of all the plottables that are associated with this axis rect\&.
.PP
A plottable is considered associated with an axis rect if its key or value axis (or both) is in this axis rect\&.
.PP
\fBSee also:\fP
.RS 4
\fBgraphs\fP, \fBitems\fP 
.RE
.PP

.SS "\fBQCPAxis\fP * QCPAxisRect::rangeDragAxis (Qt::Orientation orientation)"
Returns the range drag axis of the \fIorientation\fP provided\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetRangeDragAxes\fP 
.RE
.PP

.SS "\fBQCPAxis\fP * QCPAxisRect::rangeZoomAxis (Qt::Orientation orientation)"
Returns the range zoom axis of the \fIorientation\fP provided\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetRangeZoomAxes\fP 
.RE
.PP

.SS "double QCPAxisRect::rangeZoomFactor (Qt::Orientation orientation)"
Returns the range zoom factor of the \fIorientation\fP provided\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetRangeZoomFactor\fP 
.RE
.PP

.SS "bool QCPAxisRect::removeAxis (\fBQCPAxis\fP * axis)"
Removes the specified \fIaxis\fP from the axis rect and deletes it\&.
.PP
Returns true on success, i\&.e\&. if \fIaxis\fP was a valid axis in this axis rect\&.
.PP
\fBSee also:\fP
.RS 4
\fBaddAxis\fP 
.RE
.PP

.SS "int QCPAxisRect::right () const\fC [inline]\fP"
Returns the pixel position of the right border of this axis rect\&. Margins are not taken into account here, so the returned value is with respect to the inner \fBrect\fP\&. 
.SS "void QCPAxisRect::setBackground (const QPixmap & pm)"
Sets \fIpm\fP as the axis background pixmap\&. The axis background pixmap will be drawn inside the axis rect\&. Since axis rects place themselves on the 'background' layer by default, the axis rect backgrounds are usually drawn below everything else\&.
.PP
For cases where the provided pixmap doesn't have the same size as the axis rect, scaling can be enabled with \fBsetBackgroundScaled\fP and the scaling mode (i\&.e\&. whether and how the aspect ratio is preserved) can be set with \fBsetBackgroundScaledMode\fP\&. To set all these options in one call, consider using the overloaded version of this function\&.
.PP
Below the pixmap, the axis rect may be optionally filled with a brush, if specified with \fBsetBackground(const QBrush &brush)\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetBackgroundScaled\fP, \fBsetBackgroundScaledMode\fP, \fBsetBackground(const QBrush &brush)\fP 
.RE
.PP

.SS "void QCPAxisRect::setBackground (const QPixmap & pm, bool scaled, Qt::AspectRatioMode mode = \fCQt::KeepAspectRatioByExpanding\fP)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Allows setting the background pixmap of the axis rect, whether it shall be scaled and how it shall be scaled in one call\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetBackground(const QPixmap &pm)\fP, \fBsetBackgroundScaled\fP, \fBsetBackgroundScaledMode\fP 
.RE
.PP

.SS "void QCPAxisRect::setBackground (const QBrush & brush)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Sets \fIbrush\fP as the background brush\&. The axis rect background will be filled with this brush\&. Since axis rects place themselves on the 'background' layer by default, the axis rect backgrounds are usually drawn below everything else\&.
.PP
The brush will be drawn before (under) any background pixmap, which may be specified with \fBsetBackground(const QPixmap &pm)\fP\&.
.PP
To disable drawing of a background brush, set \fIbrush\fP to Qt::NoBrush\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetBackground(const QPixmap &pm)\fP 
.RE
.PP

.SS "void QCPAxisRect::setBackgroundScaled (bool scaled)"
Sets whether the axis background pixmap shall be scaled to fit the axis rect or not\&. If \fIscaled\fP is set to true, you may control whether and how the aspect ratio of the original pixmap is preserved with \fBsetBackgroundScaledMode\fP\&.
.PP
Note that the scaled version of the original pixmap is buffered, so there is no performance penalty on replots\&. (Except when the axis rect dimensions are changed continuously\&.)
.PP
\fBSee also:\fP
.RS 4
\fBsetBackground\fP, \fBsetBackgroundScaledMode\fP 
.RE
.PP

.SS "void QCPAxisRect::setBackgroundScaledMode (Qt::AspectRatioMode mode)"
If scaling of the axis background pixmap is enabled (\fBsetBackgroundScaled\fP), use this function to define whether and how the aspect ratio of the original pixmap passed to \fBsetBackground\fP is preserved\&. 
.PP
\fBSee also:\fP
.RS 4
\fBsetBackground\fP, \fBsetBackgroundScaled\fP 
.RE
.PP

.SS "void QCPAxisRect::setRangeDrag (Qt::Orientations orientations)"
Sets which axis orientation may be range dragged by the user with mouse interaction\&. What orientation corresponds to which specific axis can be set with \fBsetRangeDragAxes(QCPAxis *horizontal, QCPAxis *vertical)\fP\&. By default, the horizontal axis is the bottom axis (xAxis) and the vertical axis is the left axis (yAxis)\&.
.PP
To disable range dragging entirely, pass 0 as \fIorientations\fP or remove \fBQCP::iRangeDrag\fP from \fBQCustomPlot::setInteractions\fP\&. To enable range dragging for both directions, pass \fCQt::Horizontal | Qt::Vertical\fP as \fIorientations\fP\&.
.PP
In addition to setting \fIorientations\fP to a non-zero value, make sure \fBQCustomPlot::setInteractions\fP contains \fBQCP::iRangeDrag\fP to enable the range dragging interaction\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetRangeZoom\fP, \fBsetRangeDragAxes\fP, \fBQCustomPlot::setNoAntialiasingOnDrag\fP 
.RE
.PP

.SS "void QCPAxisRect::setRangeDragAxes (\fBQCPAxis\fP * horizontal, \fBQCPAxis\fP * vertical)"
Sets the axes whose range will be dragged when \fBsetRangeDrag\fP enables mouse range dragging on the \fBQCustomPlot\fP widget\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetRangeZoomAxes\fP 
.RE
.PP

.SS "void QCPAxisRect::setRangeZoom (Qt::Orientations orientations)"
Sets which axis orientation may be zoomed by the user with the mouse wheel\&. What orientation corresponds to which specific axis can be set with \fBsetRangeZoomAxes\fP(\fBQCPAxis\fP *horizontal, \fBQCPAxis\fP *vertical)\&. By default, the horizontal axis is the bottom axis (xAxis) and the vertical axis is the left axis (yAxis)\&.
.PP
To disable range zooming entirely, pass 0 as \fIorientations\fP or remove \fBQCP::iRangeZoom\fP from \fBQCustomPlot::setInteractions\fP\&. To enable range zooming for both directions, pass \fCQt::Horizontal | Qt::Vertical\fP as \fIorientations\fP\&.
.PP
In addition to setting \fIorientations\fP to a non-zero value, make sure \fBQCustomPlot::setInteractions\fP contains \fBQCP::iRangeZoom\fP to enable the range zooming interaction\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetRangeZoomFactor\fP, \fBsetRangeZoomAxes\fP, \fBsetRangeDrag\fP 
.RE
.PP

.SS "void QCPAxisRect::setRangeZoomAxes (\fBQCPAxis\fP * horizontal, \fBQCPAxis\fP * vertical)"
Sets the axes whose range will be zoomed when \fBsetRangeZoom\fP enables mouse wheel zooming on the \fBQCustomPlot\fP widget\&. The two axes can be zoomed with different strengths, when different factors are passed to \fBsetRangeZoomFactor(double horizontalFactor, double verticalFactor)\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetRangeDragAxes\fP 
.RE
.PP

.SS "void QCPAxisRect::setRangeZoomFactor (double horizontalFactor, double verticalFactor)"
Sets how strong one rotation step of the mouse wheel zooms, when range zoom was activated with \fBsetRangeZoom\fP\&. The two parameters \fIhorizontalFactor\fP and \fIverticalFactor\fP provide a way to let the horizontal axis zoom at different rates than the vertical axis\&. Which axis is horizontal and which is vertical, can be set with \fBsetRangeZoomAxes\fP\&.
.PP
When the zoom factor is greater than one, scrolling the mouse wheel backwards (towards the user) will zoom in (make the currently visible range smaller)\&. For zoom factors smaller than one, the same scrolling direction will zoom out\&. 
.SS "void QCPAxisRect::setRangeZoomFactor (double factor)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Sets both the horizontal and vertical zoom \fIfactor\fP\&. 
.SS "void QCPAxisRect::setupFullAxesBox (bool connectRanges = \fCfalse\fP)"
Convenience function to create an axis on each side that doesn't have any axes yet and set their visibility to true\&. Further, the top/right axes are assigned the following properties of the bottom/left axes:
.PP
.PD 0
.IP "\(bu" 2
range (\fBQCPAxis::setRange\fP) 
.IP "\(bu" 2
range reversed (\fBQCPAxis::setRangeReversed\fP) 
.IP "\(bu" 2
scale type (\fBQCPAxis::setScaleType\fP) 
.IP "\(bu" 2
scale log base (\fBQCPAxis::setScaleLogBase\fP) 
.IP "\(bu" 2
ticks (\fBQCPAxis::setTicks\fP) 
.IP "\(bu" 2
auto (major) tick count (\fBQCPAxis::setAutoTickCount\fP) 
.IP "\(bu" 2
sub tick count (\fBQCPAxis::setSubTickCount\fP) 
.IP "\(bu" 2
auto sub ticks (\fBQCPAxis::setAutoSubTicks\fP) 
.IP "\(bu" 2
tick step (\fBQCPAxis::setTickStep\fP) 
.IP "\(bu" 2
auto tick step (\fBQCPAxis::setAutoTickStep\fP) 
.IP "\(bu" 2
number format (\fBQCPAxis::setNumberFormat\fP) 
.IP "\(bu" 2
number precision (\fBQCPAxis::setNumberPrecision\fP) 
.IP "\(bu" 2
tick label type (\fBQCPAxis::setTickLabelType\fP) 
.IP "\(bu" 2
date time format (\fBQCPAxis::setDateTimeFormat\fP) 
.IP "\(bu" 2
date time spec (\fBQCPAxis::setDateTimeSpec\fP)
.PP
Tick labels (\fBQCPAxis::setTickLabels\fP) of the right and top axes are set to false\&.
.PP
If \fIconnectRanges\fP is true, the \fBrangeChanged\fP signals of the bottom and left axes are connected to the \fBQCPAxis::setRange\fP slots of the top and right axes\&. 
.SS "QSize QCPAxisRect::size () const\fC [inline]\fP"
Returns the pixel size of this axis rect\&. Margins are not taken into account here, so the returned value is with respect to the inner \fBrect\fP\&. 
.SS "int QCPAxisRect::top () const\fC [inline]\fP"
Returns the pixel position of the top border of this axis rect\&. Margins are not taken into account here, so the returned value is with respect to the inner \fBrect\fP\&. 
.SS "QPoint QCPAxisRect::topLeft () const\fC [inline]\fP"
Returns the top left corner of this axis rect in pixels\&. Margins are not taken into account here, so the returned value is with respect to the inner \fBrect\fP\&. 
.SS "QPoint QCPAxisRect::topRight () const\fC [inline]\fP"
Returns the top right corner of this axis rect in pixels\&. Margins are not taken into account here, so the returned value is with respect to the inner \fBrect\fP\&. 
.SS "void QCPAxisRect::update (\fBUpdatePhase\fP phase)\fC [virtual]\fP"
This method is called automatically upon replot and doesn't need to be called by users of \fBQCPAxisRect\fP\&.
.PP
Calls the base class implementation to update the margins (see \fBQCPLayoutElement::update\fP), and finally passes the \fBrect\fP to the inset layout (\fBinsetLayout\fP) and calls its QCPInsetLayout::update function\&. 
.PP
Reimplemented from \fBQCPLayoutElement\fP\&.
.SS "void QCPAxisRect::wheelEvent (QWheelEvent * event)\fC [protected]\fP, \fC [virtual]\fP"
This event is called, if the mouse wheel is scrolled while the cursor is inside the rect of this layout element\&. 
.PP
Reimplemented from \fBQCPLayoutElement\fP\&.
.SS "int QCPAxisRect::width () const\fC [inline]\fP"
Returns the pixel width of this axis rect\&. Margins are not taken into account here, so the returned value is with respect to the inner \fBrect\fP\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Voice analyze from the source code\&.
