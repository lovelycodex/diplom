.TH "QCPAxis" 3 "Thu Jun 18 2015" "Version v.2" "Voice analyze" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPAxis \- Manages a single axis inside a \fBQCustomPlot\fP\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBAxisType\fP { \fBatLeft\fP = 0x01, \fBatRight\fP = 0x02, \fBatTop\fP = 0x04, \fBatBottom\fP = 0x08 }"
.br
.ti -1c
.RI "enum \fBLabelType\fP { \fBltNumber\fP, \fBltDateTime\fP }"
.br
.ti -1c
.RI "enum \fBLabelSide\fP { \fBlsInside\fP, \fBlsOutside\fP }"
.br
.ti -1c
.RI "enum \fBScaleType\fP { \fBstLinear\fP, \fBstLogarithmic\fP }"
.br
.ti -1c
.RI "enum \fBSelectablePart\fP { \fBspNone\fP = 0, \fBspAxis\fP = 0x001, \fBspTickLabels\fP = 0x002, \fBspAxisLabel\fP = 0x004 }"
.br
.in -1c
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBticksRequest\fP ()"
.br
.ti -1c
.RI "void \fBrangeChanged\fP (const \fBQCPRange\fP &newRange)"
.br
.ti -1c
.RI "void \fBrangeChanged\fP (const \fBQCPRange\fP &newRange, const \fBQCPRange\fP &oldRange)"
.br
.ti -1c
.RI "void \fBscaleTypeChanged\fP (\fBQCPAxis::ScaleType\fP scaleType)"
.br
.ti -1c
.RI "void \fBselectionChanged\fP (const QCPAxis::SelectableParts &parts)"
.br
.ti -1c
.RI "void \fBselectableChanged\fP (const QCPAxis::SelectableParts &parts)"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPAxis\fP (\fBQCPAxisRect\fP *parent, \fBAxisType\fP type)"
.br
.ti -1c
.RI "\fBAxisType\fP \fBaxisType\fP () const "
.br
.ti -1c
.RI "\fBQCPAxisRect\fP * \fBaxisRect\fP () const "
.br
.ti -1c
.RI "\fBScaleType\fP \fBscaleType\fP () const "
.br
.ti -1c
.RI "double \fBscaleLogBase\fP () const "
.br
.ti -1c
.RI "const \fBQCPRange\fP \fBrange\fP () const "
.br
.ti -1c
.RI "bool \fBrangeReversed\fP () const "
.br
.ti -1c
.RI "bool \fBautoTicks\fP () const "
.br
.ti -1c
.RI "int \fBautoTickCount\fP () const "
.br
.ti -1c
.RI "bool \fBautoTickLabels\fP () const "
.br
.ti -1c
.RI "bool \fBautoTickStep\fP () const "
.br
.ti -1c
.RI "bool \fBautoSubTicks\fP () const "
.br
.ti -1c
.RI "bool \fBticks\fP () const "
.br
.ti -1c
.RI "bool \fBtickLabels\fP () const "
.br
.ti -1c
.RI "int \fBtickLabelPadding\fP () const "
.br
.ti -1c
.RI "\fBLabelType\fP \fBtickLabelType\fP () const "
.br
.ti -1c
.RI "QFont \fBtickLabelFont\fP () const "
.br
.ti -1c
.RI "QColor \fBtickLabelColor\fP () const "
.br
.ti -1c
.RI "double \fBtickLabelRotation\fP () const "
.br
.ti -1c
.RI "\fBLabelSide\fP \fBtickLabelSide\fP () const "
.br
.ti -1c
.RI "QString \fBdateTimeFormat\fP () const "
.br
.ti -1c
.RI "Qt::TimeSpec \fBdateTimeSpec\fP () const "
.br
.ti -1c
.RI "QString \fBnumberFormat\fP () const "
.br
.ti -1c
.RI "int \fBnumberPrecision\fP () const "
.br
.ti -1c
.RI "double \fBtickStep\fP () const "
.br
.ti -1c
.RI "QVector< double > \fBtickVector\fP () const "
.br
.ti -1c
.RI "QVector< QString > \fBtickVectorLabels\fP () const "
.br
.ti -1c
.RI "int \fBtickLengthIn\fP () const "
.br
.ti -1c
.RI "int \fBtickLengthOut\fP () const "
.br
.ti -1c
.RI "int \fBsubTickCount\fP () const "
.br
.ti -1c
.RI "int \fBsubTickLengthIn\fP () const "
.br
.ti -1c
.RI "int \fBsubTickLengthOut\fP () const "
.br
.ti -1c
.RI "QPen \fBbasePen\fP () const "
.br
.ti -1c
.RI "QPen \fBtickPen\fP () const "
.br
.ti -1c
.RI "QPen \fBsubTickPen\fP () const "
.br
.ti -1c
.RI "QFont \fBlabelFont\fP () const "
.br
.ti -1c
.RI "QColor \fBlabelColor\fP () const "
.br
.ti -1c
.RI "QString \fBlabel\fP () const "
.br
.ti -1c
.RI "int \fBlabelPadding\fP () const "
.br
.ti -1c
.RI "int \fBpadding\fP () const "
.br
.ti -1c
.RI "int \fBoffset\fP () const "
.br
.ti -1c
.RI "SelectableParts \fBselectedParts\fP () const "
.br
.ti -1c
.RI "SelectableParts \fBselectableParts\fP () const "
.br
.ti -1c
.RI "QFont \fBselectedTickLabelFont\fP () const "
.br
.ti -1c
.RI "QFont \fBselectedLabelFont\fP () const "
.br
.ti -1c
.RI "QColor \fBselectedTickLabelColor\fP () const "
.br
.ti -1c
.RI "QColor \fBselectedLabelColor\fP () const "
.br
.ti -1c
.RI "QPen \fBselectedBasePen\fP () const "
.br
.ti -1c
.RI "QPen \fBselectedTickPen\fP () const "
.br
.ti -1c
.RI "QPen \fBselectedSubTickPen\fP () const "
.br
.ti -1c
.RI "\fBQCPLineEnding\fP \fBlowerEnding\fP () const "
.br
.ti -1c
.RI "\fBQCPLineEnding\fP \fBupperEnding\fP () const "
.br
.ti -1c
.RI "\fBQCPGrid\fP * \fBgrid\fP () const "
.br
.ti -1c
.RI "Q_SLOT void \fBsetScaleType\fP (\fBQCPAxis::ScaleType\fP type)"
.br
.ti -1c
.RI "void \fBsetScaleLogBase\fP (double base)"
.br
.ti -1c
.RI "Q_SLOT void \fBsetRange\fP (const \fBQCPRange\fP &range)"
.br
.ti -1c
.RI "void \fBsetRange\fP (double lower, double upper)"
.br
.ti -1c
.RI "void \fBsetRange\fP (double position, double size, Qt::AlignmentFlag alignment)"
.br
.ti -1c
.RI "void \fBsetRangeLower\fP (double lower)"
.br
.ti -1c
.RI "void \fBsetRangeUpper\fP (double upper)"
.br
.ti -1c
.RI "void \fBsetRangeReversed\fP (bool reversed)"
.br
.ti -1c
.RI "void \fBsetAutoTicks\fP (bool on)"
.br
.ti -1c
.RI "void \fBsetAutoTickCount\fP (int approximateCount)"
.br
.ti -1c
.RI "void \fBsetAutoTickLabels\fP (bool on)"
.br
.ti -1c
.RI "void \fBsetAutoTickStep\fP (bool on)"
.br
.ti -1c
.RI "void \fBsetAutoSubTicks\fP (bool on)"
.br
.ti -1c
.RI "void \fBsetTicks\fP (bool show)"
.br
.ti -1c
.RI "void \fBsetTickLabels\fP (bool show)"
.br
.ti -1c
.RI "void \fBsetTickLabelPadding\fP (int padding)"
.br
.ti -1c
.RI "void \fBsetTickLabelType\fP (\fBLabelType\fP type)"
.br
.ti -1c
.RI "void \fBsetTickLabelFont\fP (const QFont &font)"
.br
.ti -1c
.RI "void \fBsetTickLabelColor\fP (const QColor &color)"
.br
.ti -1c
.RI "void \fBsetTickLabelRotation\fP (double degrees)"
.br
.ti -1c
.RI "void \fBsetTickLabelSide\fP (\fBLabelSide\fP side)"
.br
.ti -1c
.RI "void \fBsetDateTimeFormat\fP (const QString &format)"
.br
.ti -1c
.RI "void \fBsetDateTimeSpec\fP (const Qt::TimeSpec &timeSpec)"
.br
.ti -1c
.RI "void \fBsetNumberFormat\fP (const QString &formatCode)"
.br
.ti -1c
.RI "void \fBsetNumberPrecision\fP (int precision)"
.br
.ti -1c
.RI "void \fBsetTickStep\fP (double step)"
.br
.ti -1c
.RI "void \fBsetTickVector\fP (const QVector< double > &vec)"
.br
.ti -1c
.RI "void \fBsetTickVectorLabels\fP (const QVector< QString > &vec)"
.br
.ti -1c
.RI "void \fBsetTickLength\fP (int inside, int outside=0)"
.br
.ti -1c
.RI "void \fBsetTickLengthIn\fP (int inside)"
.br
.ti -1c
.RI "void \fBsetTickLengthOut\fP (int outside)"
.br
.ti -1c
.RI "void \fBsetSubTickCount\fP (int count)"
.br
.ti -1c
.RI "void \fBsetSubTickLength\fP (int inside, int outside=0)"
.br
.ti -1c
.RI "void \fBsetSubTickLengthIn\fP (int inside)"
.br
.ti -1c
.RI "void \fBsetSubTickLengthOut\fP (int outside)"
.br
.ti -1c
.RI "void \fBsetBasePen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetTickPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetSubTickPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetLabelFont\fP (const QFont &font)"
.br
.ti -1c
.RI "void \fBsetLabelColor\fP (const QColor &color)"
.br
.ti -1c
.RI "void \fBsetLabel\fP (const QString &str)"
.br
.ti -1c
.RI "void \fBsetLabelPadding\fP (int padding)"
.br
.ti -1c
.RI "void \fBsetPadding\fP (int padding)"
.br
.ti -1c
.RI "void \fBsetOffset\fP (int offset)"
.br
.ti -1c
.RI "void \fBsetSelectedTickLabelFont\fP (const QFont &font)"
.br
.ti -1c
.RI "void \fBsetSelectedLabelFont\fP (const QFont &font)"
.br
.ti -1c
.RI "void \fBsetSelectedTickLabelColor\fP (const QColor &color)"
.br
.ti -1c
.RI "void \fBsetSelectedLabelColor\fP (const QColor &color)"
.br
.ti -1c
.RI "void \fBsetSelectedBasePen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetSelectedTickPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetSelectedSubTickPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "Q_SLOT void \fBsetSelectableParts\fP (const QCPAxis::SelectableParts &selectableParts)"
.br
.ti -1c
.RI "Q_SLOT void \fBsetSelectedParts\fP (const QCPAxis::SelectableParts &selectedParts)"
.br
.ti -1c
.RI "void \fBsetLowerEnding\fP (const \fBQCPLineEnding\fP &ending)"
.br
.ti -1c
.RI "void \fBsetUpperEnding\fP (const \fBQCPLineEnding\fP &ending)"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const "
.br
.ti -1c
.RI "Qt::Orientation \fBorientation\fP () const "
.br
.ti -1c
.RI "void \fBmoveRange\fP (double diff)"
.br
.ti -1c
.RI "void \fBscaleRange\fP (double factor, double center)"
.br
.ti -1c
.RI "void \fBsetScaleRatio\fP (const \fBQCPAxis\fP *otherAxis, double ratio=1\&.0)"
.br
.ti -1c
.RI "void \fBrescale\fP (bool onlyVisiblePlottables=false)"
.br
.ti -1c
.RI "double \fBpixelToCoord\fP (double value) const "
.br
.ti -1c
.RI "double \fBcoordToPixel\fP (double value) const "
.br
.ti -1c
.RI "\fBSelectablePart\fP \fBgetPartAt\fP (const QPointF &pos) const "
.br
.ti -1c
.RI "QList< \fBQCPAbstractPlottable\fP * > \fBplottables\fP () const "
.br
.ti -1c
.RI "QList< \fBQCPGraph\fP * > \fBgraphs\fP () const "
.br
.ti -1c
.RI "QList< \fBQCPAbstractItem\fP * > \fBitems\fP () const "
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBAxisType\fP \fBmarginSideToAxisType\fP (\fBQCP::MarginSide\fP side)"
.br
.ti -1c
.RI "static Qt::Orientation \fBorientation\fP (\fBAxisType\fP type)"
.br
.ti -1c
.RI "static \fBAxisType\fP \fBopposite\fP (\fBAxisType\fP type)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBsetupTickVectors\fP ()"
.br
.ti -1c
.RI "virtual void \fBgenerateAutoTicks\fP ()"
.br
.ti -1c
.RI "virtual int \fBcalculateAutoSubTickCount\fP (double tickStep) const "
.br
.ti -1c
.RI "virtual int \fBcalculateMargin\fP ()"
.br
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const "
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter)"
.br
.ti -1c
.RI "virtual \fBQCP::Interaction\fP \fBselectionCategory\fP () const "
.br
.ti -1c
.RI "virtual void \fBselectEvent\fP (QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged)"
.br
.ti -1c
.RI "virtual void \fBdeselectEvent\fP (bool *selectionStateChanged)"
.br
.ti -1c
.RI "void \fBvisibleTickBounds\fP (int &lowIndex, int &highIndex) const "
.br
.ti -1c
.RI "double \fBbaseLog\fP (double value) const "
.br
.ti -1c
.RI "double \fBbasePow\fP (double value) const "
.br
.ti -1c
.RI "QPen \fBgetBasePen\fP () const "
.br
.ti -1c
.RI "QPen \fBgetTickPen\fP () const "
.br
.ti -1c
.RI "QPen \fBgetSubTickPen\fP () const "
.br
.ti -1c
.RI "QFont \fBgetTickLabelFont\fP () const "
.br
.ti -1c
.RI "QFont \fBgetLabelFont\fP () const "
.br
.ti -1c
.RI "QColor \fBgetTickLabelColor\fP () const "
.br
.ti -1c
.RI "QColor \fBgetLabelColor\fP () const "
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBAxisType\fP \fBmAxisType\fP"
.br
.ti -1c
.RI "\fBQCPAxisRect\fP * \fBmAxisRect\fP"
.br
.ti -1c
.RI "int \fBmPadding\fP"
.br
.ti -1c
.RI "Qt::Orientation \fBmOrientation\fP"
.br
.ti -1c
.RI "SelectableParts \fBmSelectableParts\fP"
.br
.ti -1c
.RI "SelectableParts \fBmSelectedParts\fP"
.br
.ti -1c
.RI "QPen \fBmBasePen\fP"
.br
.ti -1c
.RI "QPen \fBmSelectedBasePen\fP"
.br
.ti -1c
.RI "QString \fBmLabel\fP"
.br
.ti -1c
.RI "QFont \fBmLabelFont\fP"
.br
.ti -1c
.RI "QFont \fBmSelectedLabelFont\fP"
.br
.ti -1c
.RI "QColor \fBmLabelColor\fP"
.br
.ti -1c
.RI "QColor \fBmSelectedLabelColor\fP"
.br
.ti -1c
.RI "bool \fBmTickLabels\fP"
.br
.ti -1c
.RI "bool \fBmAutoTickLabels\fP"
.br
.ti -1c
.RI "\fBLabelType\fP \fBmTickLabelType\fP"
.br
.ti -1c
.RI "QFont \fBmTickLabelFont\fP"
.br
.ti -1c
.RI "QFont \fBmSelectedTickLabelFont\fP"
.br
.ti -1c
.RI "QColor \fBmTickLabelColor\fP"
.br
.ti -1c
.RI "QColor \fBmSelectedTickLabelColor\fP"
.br
.ti -1c
.RI "QString \fBmDateTimeFormat\fP"
.br
.ti -1c
.RI "Qt::TimeSpec \fBmDateTimeSpec\fP"
.br
.ti -1c
.RI "int \fBmNumberPrecision\fP"
.br
.ti -1c
.RI "QLatin1Char \fBmNumberFormatChar\fP"
.br
.ti -1c
.RI "bool \fBmNumberBeautifulPowers\fP"
.br
.ti -1c
.RI "bool \fBmTicks\fP"
.br
.ti -1c
.RI "double \fBmTickStep\fP"
.br
.ti -1c
.RI "int \fBmSubTickCount\fP"
.br
.ti -1c
.RI "int \fBmAutoTickCount\fP"
.br
.ti -1c
.RI "bool \fBmAutoTicks\fP"
.br
.ti -1c
.RI "bool \fBmAutoTickStep\fP"
.br
.ti -1c
.RI "bool \fBmAutoSubTicks\fP"
.br
.ti -1c
.RI "QPen \fBmTickPen\fP"
.br
.ti -1c
.RI "QPen \fBmSelectedTickPen\fP"
.br
.ti -1c
.RI "QPen \fBmSubTickPen\fP"
.br
.ti -1c
.RI "QPen \fBmSelectedSubTickPen\fP"
.br
.ti -1c
.RI "\fBQCPRange\fP \fBmRange\fP"
.br
.ti -1c
.RI "bool \fBmRangeReversed\fP"
.br
.ti -1c
.RI "\fBScaleType\fP \fBmScaleType\fP"
.br
.ti -1c
.RI "double \fBmScaleLogBase\fP"
.br
.ti -1c
.RI "double \fBmScaleLogBaseLogInv\fP"
.br
.ti -1c
.RI "\fBQCPGrid\fP * \fBmGrid\fP"
.br
.ti -1c
.RI "\fBQCPAxisPainterPrivate\fP * \fBmAxisPainter\fP"
.br
.ti -1c
.RI "int \fBmLowestVisibleTick\fP"
.br
.ti -1c
.RI "int \fBmHighestVisibleTick\fP"
.br
.ti -1c
.RI "QVector< double > \fBmTickVector\fP"
.br
.ti -1c
.RI "QVector< QString > \fBmTickVectorLabels\fP"
.br
.ti -1c
.RI "QVector< double > \fBmSubTickVector\fP"
.br
.ti -1c
.RI "bool \fBmCachedMarginValid\fP"
.br
.ti -1c
.RI "int \fBmCachedMargin\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBQCustomPlot\fP"
.br
.ti -1c
.RI "class \fBQCPGrid\fP"
.br
.ti -1c
.RI "class \fBQCPAxisRect\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Manages a single axis inside a \fBQCustomPlot\fP\&. 

Usually doesn't need to be instantiated externally\&. Access QCustomPlot's default four axes via \fBQCustomPlot::xAxis\fP (bottom), \fBQCustomPlot::yAxis\fP (left), \fBQCustomPlot::xAxis2\fP (top) and \fBQCustomPlot::yAxis2\fP (right)\&.
.PP
Axes are always part of an axis rect, see \fBQCPAxisRect\fP\&.  Naming convention of axis parts 
.br
  Overview of the spacings and paddings that define the geometry of an axis\&. The dashed gray line on the left represents the \fBQCustomPlot\fP widget border\&. 
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQCPAxis::AxisType\fP"
Defines at which side of the axis rect the axis will appear\&. This also affects how the tick marks are drawn, on which side the labels are placed etc\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIatLeft \fP\fP
\fC0x01\fP Axis is vertical and on the left side of the axis rect 
.TP
\fB\fIatRight \fP\fP
\fC0x02\fP Axis is vertical and on the right side of the axis rect 
.TP
\fB\fIatTop \fP\fP
\fC0x04\fP Axis is horizontal and on the top side of the axis rect 
.TP
\fB\fIatBottom \fP\fP
\fC0x08\fP Axis is horizontal and on the bottom side of the axis rect 
.SS "enum \fBQCPAxis::LabelSide\fP"
Defines on which side of the axis the tick labels (numbers) shall appear\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetTickLabelSide\fP 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIlsInside \fP\fP
Tick labels will be displayed inside the axis rect and clipped to the inner axis rect\&. 
.TP
\fB\fIlsOutside \fP\fP
Tick labels will be displayed outside the axis rect\&. 
.SS "enum \fBQCPAxis::LabelType\fP"
When automatic tick label generation is enabled (\fBsetAutoTickLabels\fP), defines how the coordinate of the tick is interpreted, i\&.e\&. translated into a string\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetTickLabelType\fP 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIltNumber \fP\fP
Tick coordinate is regarded as normal number and will be displayed as such\&. (see \fBsetNumberFormat\fP) 
.TP
\fB\fIltDateTime \fP\fP
Tick coordinate is regarded as a date/time (seconds since 1970-01-01T00:00:00 UTC) and will be displayed and formatted as such\&. (for details, see \fBsetDateTimeFormat\fP) 
.SS "enum \fBQCPAxis::ScaleType\fP"
Defines the scale of an axis\&. 
.PP
\fBSee also:\fP
.RS 4
\fBsetScaleType\fP 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIstLinear \fP\fP
Linear scaling\&. 
.TP
\fB\fIstLogarithmic \fP\fP
Logarithmic scaling with correspondingly transformed plots and (major) tick marks at every base power (see \fBsetScaleLogBase\fP)\&. 
.SS "enum \fBQCPAxis::SelectablePart\fP"
Defines the selectable parts of an axis\&. 
.PP
\fBSee also:\fP
.RS 4
\fBsetSelectableParts\fP, \fBsetSelectedParts\fP 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIspNone \fP\fP
None of the selectable parts\&. 
.TP
\fB\fIspAxis \fP\fP
The axis backbone and tick marks\&. 
.TP
\fB\fIspTickLabels \fP\fP
Tick labels (numbers) of this axis (as a whole, not individually) 
.TP
\fB\fIspAxisLabel \fP\fP
The axis label\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPAxis::QCPAxis (\fBQCPAxisRect\fP * parent, \fBAxisType\fP type)\fC [explicit]\fP"
Constructs an Axis instance of Type \fItype\fP for the axis rect \fIparent\fP\&.
.PP
Usually it isn't necessary to instantiate axes directly, because you can let \fBQCustomPlot\fP create them for you with \fBQCPAxisRect::addAxis\fP\&. If you want to use own QCPAxis-subclasses however, create them manually and then inject them also via \fBQCPAxisRect::addAxis\fP\&. 
.SH "Member Function Documentation"
.PP 
.SS "double QCPAxis::coordToPixel (double value) const"
Transforms \fIvalue\fP, in coordinates of the axis, to pixel coordinates of the \fBQCustomPlot\fP widget\&. 
.SS "\fBQCPAxis::SelectablePart\fP QCPAxis::getPartAt (const QPointF & pos) const"
Returns the part of the axis that is hit by \fIpos\fP (in pixels)\&. The return value of this function is independent of the user-selectable parts defined with \fBsetSelectableParts\fP\&. Further, this function does not change the current selection state of the axis\&.
.PP
If the axis is not visible (\fBsetVisible\fP), this function always returns \fBspNone\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetSelectedParts\fP, \fBsetSelectableParts\fP, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.SS "QList< \fBQCPGraph\fP * > QCPAxis::graphs () const"
Returns a list of all the graphs that have this axis as key or value axis\&.
.PP
\fBSee also:\fP
.RS 4
\fBplottables\fP, \fBitems\fP 
.RE
.PP

.SS "\fBQCPGrid\fP * QCPAxis::grid () const\fC [inline]\fP"
Returns the \fBQCPGrid\fP instance belonging to this axis\&. Access it to set details about the way the grid is displayed\&. 
.SS "QList< \fBQCPAbstractItem\fP * > QCPAxis::items () const"
Returns a list of all the items that are associated with this axis\&. An item is considered associated with an axis if at least one of its positions uses the axis as key or value axis\&.
.PP
\fBSee also:\fP
.RS 4
\fBplottables\fP, \fBgraphs\fP 
.RE
.PP

.SS "\fBQCPAxis::AxisType\fP QCPAxis::marginSideToAxisType (\fBQCP::MarginSide\fP side)\fC [static]\fP"
Transforms a margin side to the logically corresponding axis type\&. (\fBQCP::msLeft\fP to \fBQCPAxis::atLeft\fP, \fBQCP::msRight\fP to \fBQCPAxis::atRight\fP, etc\&.) 
.SS "void QCPAxis::moveRange (double diff)"
If the scale type (\fBsetScaleType\fP) is \fBstLinear\fP, \fIdiff\fP is added to the lower and upper bounds of the range\&. The range is simply moved by \fIdiff\fP\&.
.PP
If the scale type is \fBstLogarithmic\fP, the range bounds are multiplied by \fIdiff\fP\&. This corresponds to an apparent 'linear' move in logarithmic scaling by a distance of log(diff)\&. 
.SS "\fBQCPAxis::AxisType\fP QCPAxis::opposite (\fBQCPAxis::AxisType\fP type)\fC [static]\fP"
Returns the axis type that describes the opposite axis of an axis with the specified \fItype\fP\&. 
.SS "Qt::Orientation QCPAxis::orientation () const\fC [inline]\fP"
Returns the orientation of this axis\&. The axis orientation (horizontal or vertical) is deduced from the axis type (left, top, right or bottom)\&.
.PP
\fBSee also:\fP
.RS 4
\fBorientation(AxisType type)\fP 
.RE
.PP

.SS "static Qt::Orientation QCPAxis::orientation (\fBAxisType\fP type)\fC [inline]\fP, \fC [static]\fP"
Returns the orientation of the specified axis type
.PP
\fBSee also:\fP
.RS 4
\fBorientation()\fP 
.RE
.PP

.SS "double QCPAxis::pixelToCoord (double value) const"
Transforms \fIvalue\fP, in pixel coordinates of the \fBQCustomPlot\fP widget, to axis coordinates\&. 
.SS "QList< \fBQCPAbstractPlottable\fP * > QCPAxis::plottables () const"
Returns a list of all the plottables that have this axis as key or value axis\&.
.PP
If you are only interested in plottables of type \fBQCPGraph\fP, see \fBgraphs\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBgraphs\fP, \fBitems\fP 
.RE
.PP

.SS "void QCPAxis::rangeChanged (const \fBQCPRange\fP & newRange)\fC [signal]\fP"
This signal is emitted when the range of this axis has changed\&. You can connect it to the \fBsetRange\fP slot of another axis to communicate the new range to the other axis, in order for it to be synchronized\&.
.PP
You may also manipulate/correct the range with \fBsetRange\fP in a slot connected to this signal\&. This is useful if for example a maximum range span shall not be exceeded, or if the lower/upper range shouldn't go beyond certain values\&. For example, the following slot would limit the x axis to only positive ranges: 
.PP
.nf
if (newRange\&.lower < 0)
  plot->xAxis->setRange(0, newRange\&.size());

.fi
.PP
 
.SS "void QCPAxis::rangeChanged (const \fBQCPRange\fP & newRange, const \fBQCPRange\fP & oldRange)\fC [signal]\fP"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Additionally to the new range, this signal also provides the previous range held by the axis as \fIoldRange\fP\&. 
.SS "void QCPAxis::rescale (bool onlyVisiblePlottables = \fCfalse\fP)"
Changes the axis range such that all plottables associated with this axis are fully visible in that dimension\&.
.PP
\fBSee also:\fP
.RS 4
\fBQCPAbstractPlottable::rescaleAxes\fP, \fBQCustomPlot::rescaleAxes\fP 
.RE
.PP

.SS "void QCPAxis::scaleRange (double factor, double center)"
Scales the range of this axis by \fIfactor\fP around the coordinate \fIcenter\fP\&. For example, if \fIfactor\fP is 2\&.0, \fIcenter\fP is 1\&.0, then the axis range will double its size, and the point at coordinate 1\&.0 won't have changed its position in the \fBQCustomPlot\fP widget (i\&.e\&. coordinates around 1\&.0 will have moved symmetrically closer to 1\&.0)\&. 
.SS "void QCPAxis::scaleTypeChanged (\fBQCPAxis::ScaleType\fP scaleType)\fC [signal]\fP"
This signal is emitted when the scale type changes, by calls to \fBsetScaleType\fP 
.SS "void QCPAxis::selectableChanged (const QCPAxis::SelectableParts & parts)\fC [signal]\fP"
This signal is emitted when the selectability changes, by calls to \fBsetSelectableParts\fP 
.SS "void QCPAxis::selectionChanged (const QCPAxis::SelectableParts & parts)\fC [signal]\fP"
This signal is emitted when the selection state of this axis has changed, either by user interaction or by a direct call to \fBsetSelectedParts\fP\&. 
.SS "double QCPAxis::selectTest (const QPointF & pos, bool onlySelectable, QVariant * details = \fC0\fP) const\fC [virtual]\fP"
This function is used to decide whether a click hits a layerable object or not\&.
.PP
\fIpos\fP is a point in pixel coordinates on the \fBQCustomPlot\fP surface\&. This function returns the shortest pixel distance of this point to the object\&. If the object is either invisible or the distance couldn't be determined, -1\&.0 is returned\&. Further, if \fIonlySelectable\fP is true and the object is not selectable, -1\&.0 is returned, too\&.
.PP
If the object is represented not by single lines but by an area like a \fBQCPItemText\fP or the bars of a \fBQCPBars\fP plottable, a click inside the area should also be considered a hit\&. In these cases this function thus returns a constant value greater zero but still below the parent plot's selection tolerance\&. (typically the selectionTolerance multiplied by 0\&.99)\&.
.PP
Providing a constant value for area objects allows selecting line objects even when they are obscured by such area objects, by clicking close to the lines (i\&.e\&. closer than 0\&.99*selectionTolerance)\&.
.PP
The actual setting of the selection state is not done by this function\&. This is handled by the parent \fBQCustomPlot\fP when the mouseReleaseEvent occurs, and the finally selected object is notified via the selectEvent/deselectEvent methods\&.
.PP
\fIdetails\fP is an optional output parameter\&. Every layerable subclass may place any information in \fIdetails\fP\&. This information will be passed to \fBselectEvent\fP when the parent \fBQCustomPlot\fP decides on the basis of this selectTest call, that the object was successfully selected\&. The subsequent call to \fBselectEvent\fP will carry the \fIdetails\fP\&. This is useful for multi-part objects (like \fBQCPAxis\fP)\&. This way, a possibly complex calculation to decide which part was clicked is only done once in \fBselectTest\fP\&. The result (i\&.e\&. the actually clicked part) can then be placed in \fIdetails\fP\&. So in the subsequent \fBselectEvent\fP, the decision which part was selected doesn't have to be done a second time for a single selection operation\&.
.PP
You may pass 0 as \fIdetails\fP to indicate that you are not interested in those selection details\&.
.PP
\fBSee also:\fP
.RS 4
selectEvent, deselectEvent, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.PP
Reimplemented from \fBQCPLayerable\fP\&.
.SS "void QCPAxis::setAutoSubTicks (bool on)"
Sets whether the number of sub ticks in one tick interval is determined automatically\&. This works, as long as the tick step mantissa is a multiple of 0\&.5\&. When \fBsetAutoTickStep\fP is enabled, this is always the case\&.
.PP
When \fIon\fP is set to false, you may set the sub tick count with \fBsetSubTickCount\fP manually\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetAutoTickCount\fP, \fBsetAutoTicks\fP, \fBsetAutoTickStep\fP 
.RE
.PP

.SS "void QCPAxis::setAutoTickCount (int approximateCount)"
When \fBsetAutoTickStep\fP is true, \fIapproximateCount\fP determines how many ticks should be generated in the visible range, approximately\&.
.PP
It's not guaranteed that this number of ticks is met exactly, but approximately within a tolerance of about two\&.
.PP
Only values greater than zero are accepted as \fIapproximateCount\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetAutoTickStep\fP, \fBsetAutoTicks\fP, \fBsetAutoSubTicks\fP 
.RE
.PP

.SS "void QCPAxis::setAutoTickLabels (bool on)"
Sets whether the tick labels are generated automatically\&. Depending on the tick label type (\fBltNumber\fP or \fBltDateTime\fP), the labels will either show the coordinate as floating point number (\fBsetNumberFormat\fP), or a date/time formatted according to \fBsetDateTimeFormat\fP\&.
.PP
If \fIon\fP is set to false, you should provide the tick labels via \fBsetTickVectorLabels\fP\&. This is usually used in a combination with \fBsetAutoTicks\fP set to false for complete control over tick positions and labels, e\&.g\&. when the ticks should be at multiples of pi and show '2pi', '3pi' etc\&. as tick labels\&.
.PP
If you need dynamically calculated tick vectors (and possibly tick label vectors), set the vectors in a slot connected to the \fBticksRequest\fP signal\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetAutoTicks\fP 
.RE
.PP

.SS "void QCPAxis::setAutoTicks (bool on)"
Sets whether the tick positions should be calculated automatically (either from an automatically generated tick step or a tick step provided manually via \fBsetTickStep\fP, see \fBsetAutoTickStep\fP)\&.
.PP
If \fIon\fP is set to false, you must provide the tick positions manually via \fBsetTickVector\fP\&. For these manual ticks you may let \fBQCPAxis\fP generate the appropriate labels automatically by leaving \fBsetAutoTickLabels\fP set to true\&. If you also wish to control the displayed labels manually, set \fBsetAutoTickLabels\fP to false and provide the label strings with \fBsetTickVectorLabels\fP\&.
.PP
If you need dynamically calculated tick vectors (and possibly tick label vectors), set the vectors in a slot connected to the \fBticksRequest\fP signal\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetAutoTickLabels\fP, \fBsetAutoSubTicks\fP, \fBsetAutoTickCount\fP, \fBsetAutoTickStep\fP 
.RE
.PP

.SS "void QCPAxis::setAutoTickStep (bool on)"
Sets whether the tick step, i\&.e\&. the interval between two (major) ticks, is calculated automatically\&. If \fIon\fP is set to true, the axis finds a tick step that is reasonable for human readable plots\&.
.PP
The number of ticks the algorithm aims for within the visible range can be specified with \fBsetAutoTickCount\fP\&.
.PP
If \fIon\fP is set to false, you may set the tick step manually with \fBsetTickStep\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetAutoTicks\fP, \fBsetAutoSubTicks\fP, \fBsetAutoTickCount\fP 
.RE
.PP

.SS "void QCPAxis::setBasePen (const QPen & pen)"
Sets the pen, the axis base line is drawn with\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetTickPen\fP, \fBsetSubTickPen\fP 
.RE
.PP

.SS "void QCPAxis::setDateTimeFormat (const QString & format)"
Sets the format in which dates and times are displayed as tick labels, if \fBsetTickLabelType\fP is \fBltDateTime\fP\&. for details about the \fIformat\fP string, see the documentation of QDateTime::toString()\&.
.PP
Newlines can be inserted with '\\n'\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetDateTimeSpec\fP 
.RE
.PP

.SS "void QCPAxis::setDateTimeSpec (const Qt::TimeSpec & timeSpec)"
Sets the time spec that is used for the date time values when \fBsetTickLabelType\fP is \fBltDateTime\fP\&.
.PP
The default value of QDateTime objects (and also \fBQCustomPlot\fP) is \fCQt::LocalTime\fP\&. However, if the date time values passed to \fBQCustomPlot\fP are given in the UTC spec, set \fItimeSpec\fP to \fCQt::UTC\fP to get the correct axis labels\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetDateTimeFormat\fP 
.RE
.PP

.SS "void QCPAxis::setLabel (const QString & str)"
Sets the text of the axis label that will be shown below/above or next to the axis, depending on its orientation\&. To disable axis labels, pass an empty string as \fIstr\fP\&. 
.SS "void QCPAxis::setLabelColor (const QColor & color)"
Sets the color of the axis label\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetLabelFont\fP 
.RE
.PP

.SS "void QCPAxis::setLabelFont (const QFont & font)"
Sets the font of the axis label\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetLabelColor\fP 
.RE
.PP

.SS "void QCPAxis::setLabelPadding (int padding)"
Sets the distance between the tick labels and the axis label\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetTickLabelPadding\fP, \fBsetPadding\fP 
.RE
.PP

.SS "void QCPAxis::setLowerEnding (const \fBQCPLineEnding\fP & ending)"
Sets the style for the lower axis ending\&. See the documentation of \fBQCPLineEnding\fP for available styles\&.
.PP
For horizontal axes, this method refers to the left ending, for vertical axes the bottom ending\&. Note that this meaning does not change when the axis range is reversed with \fBsetRangeReversed\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetUpperEnding\fP 
.RE
.PP

.SS "void QCPAxis::setNumberFormat (const QString & formatCode)"
Sets the number format for the numbers drawn as tick labels (if tick label type is \fBltNumber\fP)\&. This \fIformatCode\fP is an extended version of the format code used e\&.g\&. by QString::number() and QLocale::toString()\&. For reference about that, see the 'Argument Formats' section in the detailed description of the QString class\&. \fIformatCode\fP is a string of one, two or three characters\&. The first character is identical to the normal format code used by Qt\&. In short, this means: 'e'/'E' scientific format, 'f' fixed format, 'g'/'G' scientific or fixed, whichever is shorter\&.
.PP
The second and third characters are optional and specific to \fBQCustomPlot\fP:
.br
If the first char was 'e' or 'g', numbers are/might be displayed in the scientific format, e\&.g\&. '5\&.5e9', which is ugly in a plot\&. So when the second char of \fIformatCode\fP is set to 'b' (for 'beautiful'), those exponential numbers are formatted in a more natural way, i\&.e\&. '5\&.5
[multiplication sign] 10 [superscript] 9'\&. By default, the multiplication sign is a centered dot\&. If instead a cross should be shown (as is usual in the USA), the third char of \fIformatCode\fP can be set to 'c'\&. The inserted multiplication signs are the UTF-8 characters 215 (0xD7) for the cross and 183 (0xB7) for the dot\&.
.PP
If the scale type (\fBsetScaleType\fP) is \fBstLogarithmic\fP and the \fIformatCode\fP uses the 'b' option (beautifully typeset decimal powers), the display usually is '1 [multiplication sign] 10
[superscript] n', which looks unnatural for logarithmic scaling (the '1 [multiplication sign]' part)\&. To only display the decimal power, set the number precision to zero with \fBsetNumberPrecision\fP\&.
.PP
Examples for \fIformatCode:\fP 
.PD 0

.IP "\(bu" 2
\fCg\fP normal format code behaviour\&. If number is small, fixed format is used, if number is large, normal scientific format is used 
.IP "\(bu" 2
\fCgb\fP If number is small, fixed format is used, if number is large, scientific format is used with beautifully typeset decimal powers and a dot as multiplication sign 
.IP "\(bu" 2
\fCebc\fP All numbers are in scientific format with beautifully typeset decimal power and a cross as multiplication sign 
.IP "\(bu" 2
\fCfb\fP illegal format code, since fixed format doesn't support (or need) beautifully typeset decimal powers\&. Format code will be reduced to 'f'\&. 
.IP "\(bu" 2
\fChello\fP illegal format code, since first char is not 'e', 'E', 'f', 'g' or 'G'\&. Current format code will not be changed\&. 
.PP

.SS "void QCPAxis::setNumberPrecision (int precision)"
Sets the precision of the tick label numbers\&. See QLocale::toString(double i, char f, int prec) for details\&. The effect of precisions are most notably for number Formats starting with 'e', see \fBsetNumberFormat\fP
.PP
If the scale type (\fBsetScaleType\fP) is \fBstLogarithmic\fP and the number format (\fBsetNumberFormat\fP) uses the 'b' format code (beautifully typeset decimal powers), the display usually is '1 [multiplication sign] 10 [superscript] n', which looks unnatural for logarithmic scaling (the redundant '1 [multiplication sign]' part)\&. To only display the decimal power '10
[superscript] n', set \fIprecision\fP to zero\&. 
.SS "void QCPAxis::setOffset (int offset)"
Sets the offset the axis has to its axis rect side\&.
.PP
If an axis rect side has multiple axes and automatic margin calculation is enabled for that side, only the offset of the inner most axis has meaning (even if it is set to be invisible)\&. The offset of the other, outer axes is controlled automatically, to place them at appropriate positions\&. 
.SS "void QCPAxis::setPadding (int padding)"
Sets the padding of the axis\&.
.PP
When \fBQCPAxisRect::setAutoMargins\fP is enabled, the padding is the additional outer most space, that is left blank\&.
.PP
The axis padding has no meaning if \fBQCPAxisRect::setAutoMargins\fP is disabled\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetLabelPadding\fP, \fBsetTickLabelPadding\fP 
.RE
.PP

.SS "void QCPAxis::setRange (const \fBQCPRange\fP & range)"
Sets the range of the axis\&.
.PP
This slot may be connected with the \fBrangeChanged\fP signal of another axis so this axis is always synchronized with the other axis range, when it changes\&.
.PP
To invert the direction of an axis, use \fBsetRangeReversed\fP\&. 
.SS "void QCPAxis::setRange (double lower, double upper)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Sets the lower and upper bound of the axis range\&.
.PP
To invert the direction of an axis, use \fBsetRangeReversed\fP\&.
.PP
There is also a slot to set a range, see \fBsetRange(const QCPRange &range)\fP\&. 
.SS "void QCPAxis::setRange (double position, double size, Qt::AlignmentFlag alignment)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Sets the range of the axis\&.
.PP
The \fIposition\fP coordinate indicates together with the \fIalignment\fP parameter, where the new range will be positioned\&. \fIsize\fP defines the size of the new axis range\&. \fIalignment\fP may be Qt::AlignLeft, Qt::AlignRight or Qt::AlignCenter\&. This will cause the left border, right border, or center of the range to be aligned with \fIposition\fP\&. Any other values of \fIalignment\fP will default to Qt::AlignCenter\&. 
.SS "void QCPAxis::setRangeLower (double lower)"
Sets the lower bound of the axis range\&. The upper bound is not changed\&. 
.PP
\fBSee also:\fP
.RS 4
\fBsetRange\fP 
.RE
.PP

.SS "void QCPAxis::setRangeReversed (bool reversed)"
Sets whether the axis range (direction) is displayed reversed\&. Normally, the values on horizontal axes increase left to right, on vertical axes bottom to top\&. When \fIreversed\fP is set to true, the direction of increasing values is inverted\&.
.PP
Note that the range and data interface stays the same for reversed axes, e\&.g\&. the \fIlower\fP part of the \fBsetRange\fP interface will still reference the mathematically smaller number than the \fIupper\fP part\&. 
.SS "void QCPAxis::setRangeUpper (double upper)"
Sets the upper bound of the axis range\&. The lower bound is not changed\&. 
.PP
\fBSee also:\fP
.RS 4
\fBsetRange\fP 
.RE
.PP

.SS "void QCPAxis::setScaleLogBase (double base)"
If \fBsetScaleType\fP is set to \fBstLogarithmic\fP, \fIbase\fP will be the logarithm base of the scaling\&. In logarithmic axis scaling, major tick marks appear at all powers of \fIbase\fP\&.
.PP
Properties like tick step (\fBsetTickStep\fP) don't apply in logarithmic scaling\&. If you wish a decimal base but less major ticks, consider choosing \fIbase\fP 100, 1000 or even higher\&. 
.SS "void QCPAxis::setScaleRatio (const \fBQCPAxis\fP * otherAxis, double ratio = \fC1\&.0\fP)"
Scales the range of this axis to have a certain scale \fIratio\fP to \fIotherAxis\fP\&. The scaling will be done around the center of the current axis range\&.
.PP
For example, if \fIratio\fP is 1, this axis is the \fIyAxis\fP and \fIotherAxis\fP is \fIxAxis\fP, graphs plotted with those axes will appear in a 1:1 aspect ratio, independent of the aspect ratio the axis rect has\&.
.PP
This is an operation that changes the range of this axis once, it doesn't fix the scale ratio indefinitely\&. Note that calling this function in the constructor of the \fBQCustomPlot\fP's parent won't have the desired effect, since the widget dimensions aren't defined yet, and a resizeEvent will follow\&. 
.SS "void QCPAxis::setScaleType (\fBQCPAxis::ScaleType\fP type)"
Sets whether the axis uses a linear scale or a logarithmic scale\&. If \fItype\fP is set to \fBstLogarithmic\fP, the logarithm base can be set with \fBsetScaleLogBase\fP\&. In logarithmic axis scaling, major tick marks appear at all powers of the logarithm base\&. Properties like tick step (\fBsetTickStep\fP) don't apply in logarithmic scaling\&. If you wish a decimal base but less major ticks, consider choosing a logarithm base of 100, 1000 or even higher\&.
.PP
If \fItype\fP is \fBstLogarithmic\fP and the number format (\fBsetNumberFormat\fP) uses the 'b' option (beautifully typeset decimal powers), the display usually is '1 [multiplication sign] 10
[superscript] n', which looks unnatural for logarithmic scaling (the '1 [multiplication sign]' part)\&. To only display the decimal power, set the number precision to zero with \fBsetNumberPrecision\fP\&. 
.SS "void QCPAxis::setSelectableParts (const QCPAxis::SelectableParts & selectableParts)"
Sets whether the user can (de-)select the parts in \fIselectable\fP by clicking on the \fBQCustomPlot\fP surface\&. (When \fBQCustomPlot::setInteractions\fP contains iSelectAxes\&.)
.PP
However, even when \fIselectable\fP is set to a value not allowing the selection of a specific part, it is still possible to set the selection of this part manually, by calling \fBsetSelectedParts\fP directly\&.
.PP
\fBSee also:\fP
.RS 4
\fBSelectablePart\fP, \fBsetSelectedParts\fP 
.RE
.PP

.SS "void QCPAxis::setSelectedBasePen (const QPen & pen)"
Sets the pen that is used to draw the axis base line when selected\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetBasePen\fP, \fBsetSelectableParts\fP, \fBsetSelectedParts\fP, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.SS "void QCPAxis::setSelectedLabelColor (const QColor & color)"
Sets the color that is used for the axis label when it is selected\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetLabelColor\fP, \fBsetSelectableParts\fP, \fBsetSelectedParts\fP, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.SS "void QCPAxis::setSelectedLabelFont (const QFont & font)"
Sets the font that is used for the axis label when it is selected\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetLabelFont\fP, \fBsetSelectableParts\fP, \fBsetSelectedParts\fP, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.SS "void QCPAxis::setSelectedParts (const QCPAxis::SelectableParts & selectedParts)"
Sets the selected state of the respective axis parts described by \fBSelectablePart\fP\&. When a part is selected, it uses a different pen/font\&.
.PP
The entire selection mechanism for axes is handled automatically when \fBQCustomPlot::setInteractions\fP contains iSelectAxes\&. You only need to call this function when you wish to change the selection state manually\&.
.PP
This function can change the selection state of a part, independent of the \fBsetSelectableParts\fP setting\&.
.PP
emits the \fBselectionChanged\fP signal when \fIselected\fP is different from the previous selection state\&.
.PP
\fBSee also:\fP
.RS 4
\fBSelectablePart\fP, \fBsetSelectableParts\fP, \fBselectTest\fP, \fBsetSelectedBasePen\fP, \fBsetSelectedTickPen\fP, \fBsetSelectedSubTickPen\fP, \fBsetSelectedTickLabelFont\fP, \fBsetSelectedLabelFont\fP, \fBsetSelectedTickLabelColor\fP, \fBsetSelectedLabelColor\fP 
.RE
.PP

.SS "void QCPAxis::setSelectedSubTickPen (const QPen & pen)"
Sets the pen that is used to draw the subticks when selected\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetSubTickPen\fP, \fBsetSelectableParts\fP, \fBsetSelectedParts\fP, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.SS "void QCPAxis::setSelectedTickLabelColor (const QColor & color)"
Sets the color that is used for tick labels when they are selected\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetTickLabelColor\fP, \fBsetSelectableParts\fP, \fBsetSelectedParts\fP, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.SS "void QCPAxis::setSelectedTickLabelFont (const QFont & font)"
Sets the font that is used for tick labels when they are selected\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetTickLabelFont\fP, \fBsetSelectableParts\fP, \fBsetSelectedParts\fP, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.SS "void QCPAxis::setSelectedTickPen (const QPen & pen)"
Sets the pen that is used to draw the (major) ticks when selected\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetTickPen\fP, \fBsetSelectableParts\fP, \fBsetSelectedParts\fP, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.SS "void QCPAxis::setSubTickCount (int count)"
Sets the number of sub ticks in one (major) tick step\&. A sub tick count of three for example, divides the tick intervals in four sub intervals\&.
.PP
By default, the number of sub ticks is chosen automatically in a reasonable manner as long as the mantissa of the tick step is a multiple of 0\&.5\&. When \fBsetAutoTickStep\fP is enabled, this is always the case\&.
.PP
If you want to disable automatic sub tick count and use this function to set the count manually, see \fBsetAutoSubTicks\fP\&. 
.SS "void QCPAxis::setSubTickLength (int inside, int outside = \fC0\fP)"
Sets the length of the subticks in pixels\&. \fIinside\fP is the length the subticks will reach inside the plot and \fIoutside\fP is the length they will reach outside the plot\&. If \fIoutside\fP is greater than zero, the tick labels and axis label will increase their distance to the axis accordingly, so they won't collide with the ticks\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetTickLength\fP, \fBsetSubTickLengthIn\fP, \fBsetSubTickLengthOut\fP 
.RE
.PP

.SS "void QCPAxis::setSubTickLengthIn (int inside)"
Sets the length of the inward subticks in pixels\&. \fIinside\fP is the length the subticks will reach inside the plot\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetSubTickLengthOut\fP, \fBsetSubTickLength\fP, \fBsetTickLength\fP 
.RE
.PP

.SS "void QCPAxis::setSubTickLengthOut (int outside)"
Sets the length of the outward subticks in pixels\&. \fIoutside\fP is the length the subticks will reach outside the plot\&. If \fIoutside\fP is greater than zero, the tick labels will increase their distance to the axis accordingly, so they won't collide with the ticks\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetSubTickLengthIn\fP, \fBsetSubTickLength\fP, \fBsetTickLength\fP 
.RE
.PP

.SS "void QCPAxis::setSubTickPen (const QPen & pen)"
Sets the pen, subtick marks will be drawn with\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetSubTickCount\fP, \fBsetSubTickLength\fP, \fBsetBasePen\fP 
.RE
.PP

.SS "void QCPAxis::setTickLabelColor (const QColor & color)"
Sets the color of the tick labels\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetTickLabels\fP, \fBsetTickLabelFont\fP 
.RE
.PP

.SS "void QCPAxis::setTickLabelFont (const QFont & font)"
Sets the font of the tick labels\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetTickLabels\fP, \fBsetTickLabelColor\fP 
.RE
.PP

.SS "void QCPAxis::setTickLabelPadding (int padding)"
Sets the distance between the axis base line (including any outward ticks) and the tick labels\&. 
.PP
\fBSee also:\fP
.RS 4
\fBsetLabelPadding\fP, \fBsetPadding\fP 
.RE
.PP

.SS "void QCPAxis::setTickLabelRotation (double degrees)"
Sets the rotation of the tick labels\&. If \fIdegrees\fP is zero, the labels are drawn normally\&. Else, the tick labels are drawn rotated by \fIdegrees\fP clockwise\&. The specified angle is bound to values from -90 to 90 degrees\&.
.PP
If \fIdegrees\fP is exactly -90, 0 or 90, the tick labels are centered on the tick coordinate\&. For other angles, the label is drawn with an offset such that it seems to point toward or away from the tick mark\&. 
.SS "void QCPAxis::setTickLabels (bool show)"
Sets whether tick labels are displayed\&. Tick labels are the numbers drawn next to tick marks\&. 
.SS "void QCPAxis::setTickLabelSide (\fBLabelSide\fP side)"
Sets whether the tick labels (numbers) shall appear inside or outside the axis rect\&.
.PP
The usual and default setting is \fBlsOutside\fP\&. Very compact plots sometimes require tick labels to be inside the axis rect, to save space\&. If \fIside\fP is set to \fBlsInside\fP, the tick labels appear on the inside are additionally clipped to the axis rect\&. 
.SS "void QCPAxis::setTickLabelType (\fBLabelType\fP type)"
Sets whether the tick labels display numbers or dates/times\&.
.PP
If \fItype\fP is set to \fBltNumber\fP, the format specifications of \fBsetNumberFormat\fP apply\&.
.PP
If \fItype\fP is set to \fBltDateTime\fP, the format specifications of \fBsetDateTimeFormat\fP apply\&.
.PP
In \fBQCustomPlot\fP, date/time coordinates are \fCdouble\fP numbers representing the seconds since 1970-01-01T00:00:00 UTC\&. This format can be retrieved from QDateTime objects with the QDateTime::toTime_t() function\&. Since this only gives a resolution of one second, there is also the QDateTime::toMSecsSinceEpoch() function which returns the timespan described above in milliseconds\&. Divide its return value by 1000\&.0 to get a value with the format needed for date/time plotting, with a resolution of one millisecond\&.
.PP
Using the toMSecsSinceEpoch function allows dates that go back to 2nd January 4713 B\&.C\&. (represented by a negative number), unlike the toTime_t function, which works with unsigned integers and thus only goes back to 1st January 1970\&. So both for range and accuracy, use of toMSecsSinceEpoch()/1000\&.0 should be preferred as key coordinate for date/time axes\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetTickLabels\fP 
.RE
.PP

.SS "void QCPAxis::setTickLength (int inside, int outside = \fC0\fP)"
Sets the length of the ticks in pixels\&. \fIinside\fP is the length the ticks will reach inside the plot and \fIoutside\fP is the length they will reach outside the plot\&. If \fIoutside\fP is greater than zero, the tick labels and axis label will increase their distance to the axis accordingly, so they won't collide with the ticks\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetSubTickLength\fP, \fBsetTickLengthIn\fP, \fBsetTickLengthOut\fP 
.RE
.PP

.SS "void QCPAxis::setTickLengthIn (int inside)"
Sets the length of the inward ticks in pixels\&. \fIinside\fP is the length the ticks will reach inside the plot\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetTickLengthOut\fP, \fBsetTickLength\fP, \fBsetSubTickLength\fP 
.RE
.PP

.SS "void QCPAxis::setTickLengthOut (int outside)"
Sets the length of the outward ticks in pixels\&. \fIoutside\fP is the length the ticks will reach outside the plot\&. If \fIoutside\fP is greater than zero, the tick labels and axis label will increase their distance to the axis accordingly, so they won't collide with the ticks\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetTickLengthIn\fP, \fBsetTickLength\fP, \fBsetSubTickLength\fP 
.RE
.PP

.SS "void QCPAxis::setTickPen (const QPen & pen)"
Sets the pen, tick marks will be drawn with\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetTickLength\fP, \fBsetBasePen\fP 
.RE
.PP

.SS "void QCPAxis::setTicks (bool show)"
Sets whether tick marks are displayed\&.
.PP
Note that setting \fIshow\fP to false does not imply that tick labels are invisible, too\&. To achieve that, see \fBsetTickLabels\fP\&. 
.SS "void QCPAxis::setTickStep (double step)"
If \fBsetAutoTickStep\fP is set to false, use this function to set the tick step manually\&. The tick step is the interval between (major) ticks, in plot coordinates\&. 
.PP
\fBSee also:\fP
.RS 4
\fBsetSubTickCount\fP 
.RE
.PP

.SS "void QCPAxis::setTickVector (const QVector< double > & vec)"
If you want full control over what ticks (and possibly labels) the axes show, this function is used to set the coordinates at which ticks will appear\&.\fBsetAutoTicks\fP must be disabled, else the provided tick vector will be overwritten with automatically generated tick coordinates upon replot\&. The labels of the ticks can be generated automatically when \fBsetAutoTickLabels\fP is left enabled\&. If it is disabled, you can set the labels manually with \fBsetTickVectorLabels\fP\&.
.PP
\fIvec\fP is a vector containing the positions of the ticks, in plot coordinates\&.
.PP
\fBWarning:\fP
.RS 4
\fIvec\fP must be sorted in ascending order, no additional checks are made to ensure this\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetTickVectorLabels\fP 
.RE
.PP

.SS "void QCPAxis::setTickVectorLabels (const QVector< QString > & vec)"
If you want full control over what ticks and labels the axes show, this function is used to set a number of QStrings that will be displayed at the tick positions which you need to provide with \fBsetTickVector\fP\&. These two vectors should have the same size\&. (Note that you need to disable \fBsetAutoTicks\fP and \fBsetAutoTickLabels\fP first\&.)
.PP
\fIvec\fP is a vector containing the labels of the ticks\&. The entries correspond to the respective indices in the tick vector, passed via \fBsetTickVector\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetTickVector\fP 
.RE
.PP

.SS "void QCPAxis::setUpperEnding (const \fBQCPLineEnding\fP & ending)"
Sets the style for the upper axis ending\&. See the documentation of \fBQCPLineEnding\fP for available styles\&.
.PP
For horizontal axes, this method refers to the right ending, for vertical axes the top ending\&. Note that this meaning does not change when the axis range is reversed with \fBsetRangeReversed\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetLowerEnding\fP 
.RE
.PP

.SS "void QCPAxis::ticksRequest ()\fC [signal]\fP"
This signal is emitted when \fBsetAutoTicks\fP is false and the axis is about to generate tick labels for a replot\&.
.PP
Modifying the tick positions can be done with \fBsetTickVector\fP\&. If you also want to control the tick labels, set \fBsetAutoTickLabels\fP to false and also provide the labels with \fBsetTickVectorLabels\fP\&.
.PP
If you only want static ticks you probably don't need this signal, since you can just set the tick vector (and possibly tick label vector) once\&. However, if you want to provide ticks (and maybe labels) dynamically, e\&.g\&. depending on the current axis range, connect a slot to this signal and set the vector/vectors there\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Voice analyze from the source code\&.
