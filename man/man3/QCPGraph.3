.TH "QCPGraph" 3 "Thu Jun 18 2015" "Version v.2" "Voice analyze" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPGraph \- A plottable representing a graph in a plot\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBLineStyle\fP { \fBlsNone\fP, \fBlsLine\fP, \fBlsStepLeft\fP, \fBlsStepRight\fP, \fBlsStepCenter\fP, \fBlsImpulse\fP }"
.br
.ti -1c
.RI "enum \fBErrorType\fP { \fBetNone\fP, \fBetKey\fP, \fBetValue\fP, \fBetBoth\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPGraph\fP (\fBQCPAxis\fP *keyAxis, \fBQCPAxis\fP *valueAxis)"
.br
.ti -1c
.RI "\fBQCPDataMap\fP * \fBdata\fP () const "
.br
.ti -1c
.RI "\fBLineStyle\fP \fBlineStyle\fP () const "
.br
.ti -1c
.RI "\fBQCPScatterStyle\fP \fBscatterStyle\fP () const "
.br
.ti -1c
.RI "\fBErrorType\fP \fBerrorType\fP () const "
.br
.ti -1c
.RI "QPen \fBerrorPen\fP () const "
.br
.ti -1c
.RI "double \fBerrorBarSize\fP () const "
.br
.ti -1c
.RI "bool \fBerrorBarSkipSymbol\fP () const "
.br
.ti -1c
.RI "\fBQCPGraph\fP * \fBchannelFillGraph\fP () const "
.br
.ti -1c
.RI "bool \fBadaptiveSampling\fP () const "
.br
.ti -1c
.RI "void \fBsetData\fP (\fBQCPDataMap\fP *\fBdata\fP, bool copy=false)"
.br
.ti -1c
.RI "void \fBsetData\fP (const QVector< double > &key, const QVector< double > &value)"
.br
.ti -1c
.RI "void \fBsetDataKeyError\fP (const QVector< double > &key, const QVector< double > &value, const QVector< double > &keyError)"
.br
.ti -1c
.RI "void \fBsetDataKeyError\fP (const QVector< double > &key, const QVector< double > &value, const QVector< double > &keyErrorMinus, const QVector< double > &keyErrorPlus)"
.br
.ti -1c
.RI "void \fBsetDataValueError\fP (const QVector< double > &key, const QVector< double > &value, const QVector< double > &valueError)"
.br
.ti -1c
.RI "void \fBsetDataValueError\fP (const QVector< double > &key, const QVector< double > &value, const QVector< double > &valueErrorMinus, const QVector< double > &valueErrorPlus)"
.br
.ti -1c
.RI "void \fBsetDataBothError\fP (const QVector< double > &key, const QVector< double > &value, const QVector< double > &keyError, const QVector< double > &valueError)"
.br
.ti -1c
.RI "void \fBsetDataBothError\fP (const QVector< double > &key, const QVector< double > &value, const QVector< double > &keyErrorMinus, const QVector< double > &keyErrorPlus, const QVector< double > &valueErrorMinus, const QVector< double > &valueErrorPlus)"
.br
.ti -1c
.RI "void \fBsetLineStyle\fP (\fBLineStyle\fP ls)"
.br
.ti -1c
.RI "void \fBsetScatterStyle\fP (const \fBQCPScatterStyle\fP &style)"
.br
.ti -1c
.RI "void \fBsetErrorType\fP (\fBErrorType\fP errorType)"
.br
.ti -1c
.RI "void \fBsetErrorPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetErrorBarSize\fP (double size)"
.br
.ti -1c
.RI "void \fBsetErrorBarSkipSymbol\fP (bool enabled)"
.br
.ti -1c
.RI "void \fBsetChannelFillGraph\fP (\fBQCPGraph\fP *targetGraph)"
.br
.ti -1c
.RI "void \fBsetAdaptiveSampling\fP (bool enabled)"
.br
.ti -1c
.RI "void \fBaddData\fP (const \fBQCPDataMap\fP &dataMap)"
.br
.ti -1c
.RI "void \fBaddData\fP (const \fBQCPData\fP &\fBdata\fP)"
.br
.ti -1c
.RI "void \fBaddData\fP (double key, double value)"
.br
.ti -1c
.RI "void \fBaddData\fP (const QVector< double > &keys, const QVector< double > &values)"
.br
.ti -1c
.RI "void \fBremoveDataBefore\fP (double key)"
.br
.ti -1c
.RI "void \fBremoveDataAfter\fP (double key)"
.br
.ti -1c
.RI "void \fBremoveData\fP (double fromKey, double toKey)"
.br
.ti -1c
.RI "void \fBremoveData\fP (double key)"
.br
.ti -1c
.RI "virtual void \fBclearData\fP ()"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const "
.br
.ti -1c
.RI "void \fBrescaleAxes\fP (bool onlyEnlarge, bool includeErrorBars) const "
.br
.ti -1c
.RI "void \fBrescaleKeyAxis\fP (bool onlyEnlarge, bool includeErrorBars) const "
.br
.ti -1c
.RI "void \fBrescaleValueAxis\fP (bool onlyEnlarge, bool includeErrorBars) const "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter)"
.br
.ti -1c
.RI "virtual void \fBdrawLegendIcon\fP (\fBQCPPainter\fP *painter, const QRectF &rect) const "
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBgetKeyRange\fP (bool &foundRange, \fBSignDomain\fP inSignDomain=\fBsdBoth\fP) const "
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBgetValueRange\fP (bool &foundRange, \fBSignDomain\fP inSignDomain=\fBsdBoth\fP) const "
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBgetKeyRange\fP (bool &foundRange, \fBSignDomain\fP inSignDomain, bool includeErrors) const "
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBgetValueRange\fP (bool &foundRange, \fBSignDomain\fP inSignDomain, bool includeErrors) const "
.br
.ti -1c
.RI "virtual void \fBdrawFill\fP (\fBQCPPainter\fP *painter, QVector< QPointF > *lineData) const "
.br
.ti -1c
.RI "virtual void \fBdrawScatterPlot\fP (\fBQCPPainter\fP *painter, QVector< \fBQCPData\fP > *scatterData) const "
.br
.ti -1c
.RI "virtual void \fBdrawLinePlot\fP (\fBQCPPainter\fP *painter, QVector< QPointF > *lineData) const "
.br
.ti -1c
.RI "virtual void \fBdrawImpulsePlot\fP (\fBQCPPainter\fP *painter, QVector< QPointF > *lineData) const "
.br
.ti -1c
.RI "void \fBgetPreparedData\fP (QVector< \fBQCPData\fP > *lineData, QVector< \fBQCPData\fP > *scatterData) const "
.br
.ti -1c
.RI "void \fBgetPlotData\fP (QVector< QPointF > *lineData, QVector< \fBQCPData\fP > *scatterData) const "
.br
.ti -1c
.RI "void \fBgetScatterPlotData\fP (QVector< \fBQCPData\fP > *scatterData) const "
.br
.ti -1c
.RI "void \fBgetLinePlotData\fP (QVector< QPointF > *linePixelData, QVector< \fBQCPData\fP > *scatterData) const "
.br
.ti -1c
.RI "void \fBgetStepLeftPlotData\fP (QVector< QPointF > *linePixelData, QVector< \fBQCPData\fP > *scatterData) const "
.br
.ti -1c
.RI "void \fBgetStepRightPlotData\fP (QVector< QPointF > *linePixelData, QVector< \fBQCPData\fP > *scatterData) const "
.br
.ti -1c
.RI "void \fBgetStepCenterPlotData\fP (QVector< QPointF > *linePixelData, QVector< \fBQCPData\fP > *scatterData) const "
.br
.ti -1c
.RI "void \fBgetImpulsePlotData\fP (QVector< QPointF > *linePixelData, QVector< \fBQCPData\fP > *scatterData) const "
.br
.ti -1c
.RI "void \fBdrawError\fP (\fBQCPPainter\fP *painter, double x, double y, const \fBQCPData\fP &\fBdata\fP) const "
.br
.ti -1c
.RI "void \fBgetVisibleDataBounds\fP (QCPDataMap::const_iterator &lower, QCPDataMap::const_iterator &upper) const "
.br
.ti -1c
.RI "int \fBcountDataInBounds\fP (const QCPDataMap::const_iterator &lower, const QCPDataMap::const_iterator &upper, int maxCount) const "
.br
.ti -1c
.RI "void \fBaddFillBasePoints\fP (QVector< QPointF > *lineData) const "
.br
.ti -1c
.RI "void \fBremoveFillBasePoints\fP (QVector< QPointF > *lineData) const "
.br
.ti -1c
.RI "QPointF \fBlowerFillBasePoint\fP (double lowerKey) const "
.br
.ti -1c
.RI "QPointF \fBupperFillBasePoint\fP (double upperKey) const "
.br
.ti -1c
.RI "const QPolygonF \fBgetChannelFillPolygon\fP (const QVector< QPointF > *lineData) const "
.br
.ti -1c
.RI "int \fBfindIndexBelowX\fP (const QVector< QPointF > *\fBdata\fP, double x) const "
.br
.ti -1c
.RI "int \fBfindIndexAboveX\fP (const QVector< QPointF > *\fBdata\fP, double x) const "
.br
.ti -1c
.RI "int \fBfindIndexBelowY\fP (const QVector< QPointF > *\fBdata\fP, double y) const "
.br
.ti -1c
.RI "int \fBfindIndexAboveY\fP (const QVector< QPointF > *\fBdata\fP, double y) const "
.br
.ti -1c
.RI "double \fBpointDistance\fP (const QPointF &pixelPoint) const "
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBQCPDataMap\fP * \fBmData\fP"
.br
.ti -1c
.RI "QPen \fBmErrorPen\fP"
.br
.ti -1c
.RI "\fBLineStyle\fP \fBmLineStyle\fP"
.br
.ti -1c
.RI "\fBQCPScatterStyle\fP \fBmScatterStyle\fP"
.br
.ti -1c
.RI "\fBErrorType\fP \fBmErrorType\fP"
.br
.ti -1c
.RI "double \fBmErrorBarSize\fP"
.br
.ti -1c
.RI "bool \fBmErrorBarSkipSymbol\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPGraph\fP > \fBmChannelFillGraph\fP"
.br
.ti -1c
.RI "bool \fBmAdaptiveSampling\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBQCustomPlot\fP"
.br
.ti -1c
.RI "class \fBQCPLegend\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
A plottable representing a graph in a plot\&. 


.PP
Usually \fBQCustomPlot\fP creates graphs internally via \fBQCustomPlot::addGraph\fP and the resulting instance is accessed via \fBQCustomPlot::graph\fP\&.
.PP
To plot data, assign it with the \fBsetData\fP or \fBaddData\fP functions\&. Alternatively, you can also access and modify the graph's data via the \fBdata\fP method, which returns a pointer to the internal \fBQCPDataMap\fP\&.
.PP
Graphs are used to display single-valued data\&. Single-valued means that there should only be one data point per unique key coordinate\&. In other words, the graph can't have \fIloops\fP\&. If you do want to plot non-single-valued curves, rather use the \fBQCPCurve\fP plottable\&.
.PP
Gaps in the graph line can be created by adding data points with NaN as value (\fCqQNaN()\fP or \fCstd::numeric_limits<double>::quiet_NaN()\fP) in between the two data points that shall be separated\&.
.SH "Changing the appearance"
.PP
The appearance of the graph is mainly determined by the line style, scatter style, brush and pen of the graph (\fBsetLineStyle\fP, \fBsetScatterStyle\fP, \fBsetBrush\fP, \fBsetPen\fP)\&.
.SS "Filling under or between graphs"
\fBQCPGraph\fP knows two types of fills: Normal graph fills towards the zero-value-line parallel to the key axis of the graph, and fills between two graphs, called channel fills\&. To enable a fill, just set a brush with \fBsetBrush\fP which is neither Qt::NoBrush nor fully transparent\&.
.PP
By default, a normal fill towards the zero-value-line will be drawn\&. To set up a channel fill between this graph and another one, call \fBsetChannelFillGraph\fP with the other graph as parameter\&.
.PP
\fBSee also:\fP
.RS 4
\fBQCustomPlot::addGraph\fP, \fBQCustomPlot::graph\fP 
.RE
.PP

.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQCPGraph::ErrorType\fP"
Defines what kind of error bars are drawn for each data point 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIetNone \fP\fP
No error bars are shown\&. 
.TP
\fB\fIetKey \fP\fP
Error bars for the key dimension of the data point are shown\&. 
.TP
\fB\fIetValue \fP\fP
Error bars for the value dimension of the data point are shown\&. 
.TP
\fB\fIetBoth \fP\fP
Error bars for both key and value dimensions of the data point are shown\&. 
.SS "enum \fBQCPGraph::LineStyle\fP"
Defines how the graph's line is represented visually in the plot\&. The line is drawn with the current pen of the graph (\fBsetPen\fP)\&. 
.PP
\fBSee also:\fP
.RS 4
\fBsetLineStyle\fP 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIlsNone \fP\fP
data points are not connected with any lines (e\&.g\&. data only represented with symbols according to the scatter style, see \fBsetScatterStyle\fP) 
.TP
\fB\fIlsLine \fP\fP
data points are connected by a straight line 
.TP
\fB\fIlsStepLeft \fP\fP
line is drawn as steps where the step height is the value of the left data point 
.TP
\fB\fIlsStepRight \fP\fP
line is drawn as steps where the step height is the value of the right data point 
.TP
\fB\fIlsStepCenter \fP\fP
line is drawn as steps where the step is in between two data points 
.TP
\fB\fIlsImpulse \fP\fP
each data point is represented by a line parallel to the value axis, which reaches from the data point to the zero-value-line 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPGraph::QCPGraph (\fBQCPAxis\fP * keyAxis, \fBQCPAxis\fP * valueAxis)\fC [explicit]\fP"
Constructs a graph which uses \fIkeyAxis\fP as its key axis ('x') and \fIvalueAxis\fP as its value axis ('y')\&. \fIkeyAxis\fP and \fIvalueAxis\fP must reside in the same \fBQCustomPlot\fP instance and not have the same orientation\&. If either of these restrictions is violated, a corresponding message is printed to the debug output (qDebug), the construction is not aborted, though\&.
.PP
The constructed \fBQCPGraph\fP can be added to the plot with \fBQCustomPlot::addPlottable\fP, \fBQCustomPlot\fP then takes ownership of the graph\&.
.PP
To directly create a graph inside a plot, you can also use the simpler \fBQCustomPlot::addGraph\fP function\&. 
.SH "Member Function Documentation"
.PP 
.SS "void QCPGraph::addData (const \fBQCPDataMap\fP & dataMap)"
Adds the provided data points in \fIdataMap\fP to the current data\&.
.PP
Alternatively, you can also access and modify the graph's data via the \fBdata\fP method, which returns a pointer to the internal \fBQCPDataMap\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBremoveData\fP 
.RE
.PP

.SS "void QCPGraph::addData (const \fBQCPData\fP & data)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Adds the provided single data point in \fIdata\fP to the current data\&.
.PP
Alternatively, you can also access and modify the graph's data via the \fBdata\fP method, which returns a pointer to the internal \fBQCPDataMap\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBremoveData\fP 
.RE
.PP

.SS "void QCPGraph::addData (double key, double value)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Adds the provided single data point as \fIkey\fP and \fIvalue\fP pair to the current data\&.
.PP
Alternatively, you can also access and modify the graph's data via the \fBdata\fP method, which returns a pointer to the internal \fBQCPDataMap\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBremoveData\fP 
.RE
.PP

.SS "void QCPGraph::addData (const QVector< double > & keys, const QVector< double > & values)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Adds the provided data points as \fIkey\fP and \fIvalue\fP pairs to the current data\&.
.PP
Alternatively, you can also access and modify the graph's data via the \fBdata\fP method, which returns a pointer to the internal \fBQCPDataMap\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBremoveData\fP 
.RE
.PP

.SS "void QCPGraph::clearData ()\fC [virtual]\fP"
Removes all data points\&. 
.PP
\fBSee also:\fP
.RS 4
\fBremoveData\fP, \fBremoveDataAfter\fP, \fBremoveDataBefore\fP 
.RE
.PP

.PP
Implements \fBQCPAbstractPlottable\fP\&.
.SS "\fBQCPDataMap\fP * QCPGraph::data () const\fC [inline]\fP"
Returns a pointer to the internal data storage of type \fBQCPDataMap\fP\&. You may use it to directly manipulate the data, which may be more convenient and faster than using the regular \fBsetData\fP or \fBaddData\fP methods, in certain situations\&. 
.SS "\fBQCPRange\fP QCPGraph::getKeyRange (bool & foundRange, \fBSignDomain\fP inSignDomain, bool includeErrors) const\fC [protected]\fP, \fC [virtual]\fP"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Allows to specify whether the error bars should be included in the range calculation\&.
.PP
\fBSee also:\fP
.RS 4
getKeyRange(bool &foundRange, SignDomain inSignDomain) 
.RE
.PP

.SS "\fBQCPRange\fP QCPGraph::getValueRange (bool & foundRange, \fBSignDomain\fP inSignDomain, bool includeErrors) const\fC [protected]\fP, \fC [virtual]\fP"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Allows to specify whether the error bars should be included in the range calculation\&.
.PP
\fBSee also:\fP
.RS 4
getValueRange(bool &foundRange, SignDomain inSignDomain) 
.RE
.PP

.SS "void QCPGraph::removeData (double fromKey, double toKey)"
Removes all data points with keys between \fIfromKey\fP and \fItoKey\fP\&. if \fIfromKey\fP is greater or equal to \fItoKey\fP, the function does nothing\&. To remove a single data point with known key, use \fBremoveData(double key)\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBaddData\fP, \fBclearData\fP 
.RE
.PP

.SS "void QCPGraph::removeData (double key)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Removes a single data point at \fIkey\fP\&. If the position is not known with absolute precision, consider using \fBremoveData(double fromKey, double toKey)\fP with a small fuzziness interval around the suspected position, depeding on the precision with which the key is known\&.
.PP
\fBSee also:\fP
.RS 4
\fBaddData\fP, \fBclearData\fP 
.RE
.PP

.SS "void QCPGraph::removeDataAfter (double key)"
Removes all data points with keys greater than \fIkey\fP\&. 
.PP
\fBSee also:\fP
.RS 4
\fBaddData\fP, \fBclearData\fP 
.RE
.PP

.SS "void QCPGraph::removeDataBefore (double key)"
Removes all data points with keys smaller than \fIkey\fP\&. 
.PP
\fBSee also:\fP
.RS 4
\fBaddData\fP, \fBclearData\fP 
.RE
.PP

.SS "void QCPGraph::rescaleAxes (bool onlyEnlarge, bool includeErrorBars) const"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Allows to define whether error bars are taken into consideration when determining the new axis range\&.
.PP
\fBSee also:\fP
.RS 4
\fBrescaleKeyAxis\fP, \fBrescaleValueAxis\fP, \fBQCPAbstractPlottable::rescaleAxes\fP, \fBQCustomPlot::rescaleAxes\fP 
.RE
.PP

.SS "void QCPGraph::rescaleKeyAxis (bool onlyEnlarge, bool includeErrorBars) const"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Allows to define whether error bars (of kind \fBQCPGraph::etKey\fP) are taken into consideration when determining the new axis range\&.
.PP
\fBSee also:\fP
.RS 4
\fBrescaleAxes\fP, \fBQCPAbstractPlottable::rescaleKeyAxis\fP 
.RE
.PP

.SS "void QCPGraph::rescaleValueAxis (bool onlyEnlarge, bool includeErrorBars) const"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Allows to define whether error bars (of kind \fBQCPGraph::etValue\fP) are taken into consideration when determining the new axis range\&.
.PP
\fBSee also:\fP
.RS 4
\fBrescaleAxes\fP, \fBQCPAbstractPlottable::rescaleValueAxis\fP 
.RE
.PP

.SS "double QCPGraph::selectTest (const QPointF & pos, bool onlySelectable, QVariant * details = \fC0\fP) const\fC [virtual]\fP"
This function is used to decide whether a click hits a layerable object or not\&.
.PP
\fIpos\fP is a point in pixel coordinates on the \fBQCustomPlot\fP surface\&. This function returns the shortest pixel distance of this point to the object\&. If the object is either invisible or the distance couldn't be determined, -1\&.0 is returned\&. Further, if \fIonlySelectable\fP is true and the object is not selectable, -1\&.0 is returned, too\&.
.PP
If the object is represented not by single lines but by an area like a \fBQCPItemText\fP or the bars of a \fBQCPBars\fP plottable, a click inside the area should also be considered a hit\&. In these cases this function thus returns a constant value greater zero but still below the parent plot's selection tolerance\&. (typically the selectionTolerance multiplied by 0\&.99)\&.
.PP
Providing a constant value for area objects allows selecting line objects even when they are obscured by such area objects, by clicking close to the lines (i\&.e\&. closer than 0\&.99*selectionTolerance)\&.
.PP
The actual setting of the selection state is not done by this function\&. This is handled by the parent \fBQCustomPlot\fP when the mouseReleaseEvent occurs, and the finally selected object is notified via the selectEvent/deselectEvent methods\&.
.PP
\fIdetails\fP is an optional output parameter\&. Every layerable subclass may place any information in \fIdetails\fP\&. This information will be passed to \fBselectEvent\fP when the parent \fBQCustomPlot\fP decides on the basis of this selectTest call, that the object was successfully selected\&. The subsequent call to \fBselectEvent\fP will carry the \fIdetails\fP\&. This is useful for multi-part objects (like \fBQCPAxis\fP)\&. This way, a possibly complex calculation to decide which part was clicked is only done once in \fBselectTest\fP\&. The result (i\&.e\&. the actually clicked part) can then be placed in \fIdetails\fP\&. So in the subsequent \fBselectEvent\fP, the decision which part was selected doesn't have to be done a second time for a single selection operation\&.
.PP
You may pass 0 as \fIdetails\fP to indicate that you are not interested in those selection details\&.
.PP
\fBSee also:\fP
.RS 4
selectEvent, deselectEvent, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.PP
Implements \fBQCPAbstractPlottable\fP\&.
.SS "void QCPGraph::setAdaptiveSampling (bool enabled)"
Sets whether adaptive sampling shall be used when plotting this graph\&. \fBQCustomPlot\fP's adaptive sampling technique can drastically improve the replot performance for graphs with a larger number of points (e\&.g\&. above 10,000), without notably changing the appearance of the graph\&.
.PP
By default, adaptive sampling is enabled\&. Even if enabled, \fBQCustomPlot\fP decides whether adaptive sampling shall actually be used on a per-graph basis\&. So leaving adaptive sampling enabled has no disadvantage in almost all cases\&.
.PP
A line plot of 500,000 points without and with adaptive sampling As can be seen, line plots experience no visual degradation from adaptive sampling\&. Outliers are reproduced reliably, as well as the overall shape of the data set\&. The replot time reduces dramatically though\&. This allows \fBQCustomPlot\fP to display large amounts of data in realtime\&.
.PP
A scatter plot of 100,000 points without and with adaptive sampling Care must be taken when using high-density scatter plots in combination with adaptive sampling\&. The adaptive sampling algorithm treats scatter plots more carefully than line plots which still gives a significant reduction of replot times, but not quite as much as for line plots\&. This is because scatter plots inherently need more data points to be preserved in order to still resemble the original, non-adaptive-sampling plot\&. As shown above, the results still aren't quite identical, as banding occurs for the outer data points\&. This is in fact intentional, such that the boundaries of the data cloud stay visible to the viewer\&. How strong the banding appears, depends on the point density, i\&.e\&. the number of points in the plot\&.
.PP
For some situations with scatter plots it might thus be desirable to manually turn adaptive sampling off\&. For example, when saving the plot to disk\&. This can be achieved by setting \fIenabled\fP to false before issuing a command like \fBQCustomPlot::savePng\fP, and setting \fIenabled\fP back to true afterwards\&. 
.SS "void QCPGraph::setChannelFillGraph (\fBQCPGraph\fP * targetGraph)"
Sets the target graph for filling the area between this graph and \fItargetGraph\fP with the current brush (\fBsetBrush\fP)\&.
.PP
When \fItargetGraph\fP is set to 0, a normal graph fill to the zero-value-line will be shown\&. To disable any filling, set the brush to Qt::NoBrush\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetBrush\fP 
.RE
.PP

.SS "void QCPGraph::setData (\fBQCPDataMap\fP * data, bool copy = \fCfalse\fP)"
Replaces the current data with the provided \fIdata\fP\&.
.PP
If \fIcopy\fP is set to true, data points in \fIdata\fP will only be copied\&. if false, the graph takes ownership of the passed data and replaces the internal data pointer with it\&. This is significantly faster than copying for large datasets\&.
.PP
Alternatively, you can also access and modify the graph's data via the \fBdata\fP method, which returns a pointer to the internal \fBQCPDataMap\fP\&. 
.SS "void QCPGraph::setData (const QVector< double > & key, const QVector< double > & value)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Replaces the current data with the provided points in \fIkey\fP and \fIvalue\fP pairs\&. The provided vectors should have equal length\&. Else, the number of added points will be the size of the smallest vector\&. 
.SS "void QCPGraph::setDataBothError (const QVector< double > & key, const QVector< double > & value, const QVector< double > & keyError, const QVector< double > & valueError)"
Replaces the current data with the provided points in \fIkey\fP and \fIvalue\fP pairs\&. Additionally the symmetrical key and value errors of the data points are set to the values in \fIkeyError\fP and \fIvalueError\fP\&. For error bars to show appropriately, see \fBsetErrorType\fP\&. The provided vectors should have equal length\&. Else, the number of added points will be the size of the smallest vector\&.
.PP
For asymmetrical errors (plus different from minus), see the overloaded version of this function\&. 
.SS "void QCPGraph::setDataBothError (const QVector< double > & key, const QVector< double > & value, const QVector< double > & keyErrorMinus, const QVector< double > & keyErrorPlus, const QVector< double > & valueErrorMinus, const QVector< double > & valueErrorPlus)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Replaces the current data with the provided points in \fIkey\fP and \fIvalue\fP pairs\&. Additionally the negative key and value errors of the data points are set to the values in \fIkeyErrorMinus\fP and \fIvalueErrorMinus\fP\&. The positive key and value errors are set to the values in \fIkeyErrorPlus\fP \fIvalueErrorPlus\fP\&. For error bars to show appropriately, see \fBsetErrorType\fP\&. The provided vectors should have equal length\&. Else, the number of added points will be the size of the smallest vector\&. 
.SS "void QCPGraph::setDataKeyError (const QVector< double > & key, const QVector< double > & value, const QVector< double > & keyError)"
Replaces the current data with the provided points in \fIkey\fP and \fIvalue\fP pairs\&. Additionally the symmetrical key error of the data points are set to the values in \fIkeyError\fP\&. For error bars to show appropriately, see \fBsetErrorType\fP\&. The provided vectors should have equal length\&. Else, the number of added points will be the size of the smallest vector\&.
.PP
For asymmetrical errors (plus different from minus), see the overloaded version of this function\&. 
.SS "void QCPGraph::setDataKeyError (const QVector< double > & key, const QVector< double > & value, const QVector< double > & keyErrorMinus, const QVector< double > & keyErrorPlus)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Replaces the current data with the provided points in \fIkey\fP and \fIvalue\fP pairs\&. Additionally the negative key error of the data points are set to the values in \fIkeyErrorMinus\fP, the positive key error to \fIkeyErrorPlus\fP\&. For error bars to show appropriately, see \fBsetErrorType\fP\&. The provided vectors should have equal length\&. Else, the number of added points will be the size of the smallest vector\&. 
.SS "void QCPGraph::setDataValueError (const QVector< double > & key, const QVector< double > & value, const QVector< double > & valueError)"
Replaces the current data with the provided points in \fIkey\fP and \fIvalue\fP pairs\&. Additionally the symmetrical value error of the data points are set to the values in \fIvalueError\fP\&. For error bars to show appropriately, see \fBsetErrorType\fP\&. The provided vectors should have equal length\&. Else, the number of added points will be the size of the smallest vector\&.
.PP
For asymmetrical errors (plus different from minus), see the overloaded version of this function\&. 
.SS "void QCPGraph::setDataValueError (const QVector< double > & key, const QVector< double > & value, const QVector< double > & valueErrorMinus, const QVector< double > & valueErrorPlus)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Replaces the current data with the provided points in \fIkey\fP and \fIvalue\fP pairs\&. Additionally the negative value error of the data points are set to the values in \fIvalueErrorMinus\fP, the positive value error to \fIvalueErrorPlus\fP\&. For error bars to show appropriately, see \fBsetErrorType\fP\&. The provided vectors should have equal length\&. Else, the number of added points will be the size of the smallest vector\&. 
.SS "void QCPGraph::setErrorBarSize (double size)"
Sets the width of the handles at both ends of an error bar in pixels\&. 
.SS "void QCPGraph::setErrorBarSkipSymbol (bool enabled)"
If \fIenabled\fP is set to true, the error bar will not be drawn as a solid line under the scatter symbol but leave some free space around the symbol\&.
.PP
This feature uses the current scatter size (\fBQCPScatterStyle::setSize\fP) to determine the size of the area to leave blank\&. So when drawing Pixmaps as scatter points (\fBQCPScatterStyle::ssPixmap\fP), the scatter size must be set manually to a value corresponding to the size of the Pixmap, if the error bars should leave gaps to its boundaries\&.
.PP
\fBsetErrorType\fP, setErrorBarSize, setScatterStyle 
.SS "void QCPGraph::setErrorPen (const QPen & pen)"
Sets the pen with which the error bars will be drawn\&. 
.PP
\fBSee also:\fP
.RS 4
\fBsetErrorBarSize\fP, \fBsetErrorType\fP 
.RE
.PP

.SS "void QCPGraph::setErrorType (\fBErrorType\fP errorType)"
Sets which kind of error bars (Key Error, Value Error or both) should be drawn on each data point\&. If you set \fIerrorType\fP to something other than \fBetNone\fP, make sure to actually pass error data via the specific setData functions along with the data points (e\&.g\&. \fBsetDataValueError\fP, \fBsetDataKeyError\fP, \fBsetDataBothError\fP)\&.
.PP
\fBSee also:\fP
.RS 4
\fBErrorType\fP 
.RE
.PP

.SS "void QCPGraph::setLineStyle (\fBLineStyle\fP ls)"
Sets how the single data points are connected in the plot\&. For scatter-only plots, set \fIls\fP to \fBlsNone\fP and \fBsetScatterStyle\fP to the desired scatter style\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetScatterStyle\fP 
.RE
.PP

.SS "void QCPGraph::setScatterStyle (const \fBQCPScatterStyle\fP & style)"
Sets the visual appearance of single data points in the plot\&. If set to \fBQCPScatterStyle::ssNone\fP, no scatter points are drawn (e\&.g\&. for line-only-plots with appropriate line style)\&.
.PP
\fBSee also:\fP
.RS 4
\fBQCPScatterStyle\fP, \fBsetLineStyle\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Voice analyze from the source code\&.
