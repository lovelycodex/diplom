.TH "QCPColorMapData" 3 "Thu Jun 18 2015" "Version v.2" "Voice analyze" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPColorMapData \- Holds the two-dimensional data of a \fBQCPColorMap\fP plottable\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPColorMapData\fP (int keySize, int valueSize, const \fBQCPRange\fP &keyRange, const \fBQCPRange\fP &valueRange)"
.br
.ti -1c
.RI "\fBQCPColorMapData\fP (const \fBQCPColorMapData\fP &other)"
.br
.ti -1c
.RI "\fBQCPColorMapData\fP & \fBoperator=\fP (const \fBQCPColorMapData\fP &other)"
.br
.ti -1c
.RI "int \fBkeySize\fP () const "
.br
.ti -1c
.RI "int \fBvalueSize\fP () const "
.br
.ti -1c
.RI "\fBQCPRange\fP \fBkeyRange\fP () const "
.br
.ti -1c
.RI "\fBQCPRange\fP \fBvalueRange\fP () const "
.br
.ti -1c
.RI "\fBQCPRange\fP \fBdataBounds\fP () const "
.br
.ti -1c
.RI "double \fBdata\fP (double key, double value)"
.br
.ti -1c
.RI "double \fBcell\fP (int keyIndex, int valueIndex)"
.br
.ti -1c
.RI "void \fBsetSize\fP (int keySize, int valueSize)"
.br
.ti -1c
.RI "void \fBsetKeySize\fP (int keySize)"
.br
.ti -1c
.RI "void \fBsetValueSize\fP (int valueSize)"
.br
.ti -1c
.RI "void \fBsetRange\fP (const \fBQCPRange\fP &keyRange, const \fBQCPRange\fP &valueRange)"
.br
.ti -1c
.RI "void \fBsetKeyRange\fP (const \fBQCPRange\fP &keyRange)"
.br
.ti -1c
.RI "void \fBsetValueRange\fP (const \fBQCPRange\fP &valueRange)"
.br
.ti -1c
.RI "void \fBsetData\fP (double key, double value, double z)"
.br
.ti -1c
.RI "void \fBsetCell\fP (int keyIndex, int valueIndex, double z)"
.br
.ti -1c
.RI "void \fBrecalculateDataBounds\fP ()"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "void \fBfill\fP (double z)"
.br
.ti -1c
.RI "bool \fBisEmpty\fP () const "
.br
.ti -1c
.RI "void \fBcoordToCell\fP (double key, double value, int *keyIndex, int *valueIndex) const "
.br
.ti -1c
.RI "void \fBcellToCoord\fP (int keyIndex, int valueIndex, double *key, double *value) const "
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "int \fBmKeySize\fP"
.br
.ti -1c
.RI "int \fBmValueSize\fP"
.br
.ti -1c
.RI "\fBQCPRange\fP \fBmKeyRange\fP"
.br
.ti -1c
.RI "\fBQCPRange\fP \fBmValueRange\fP"
.br
.ti -1c
.RI "bool \fBmIsEmpty\fP"
.br
.ti -1c
.RI "double * \fBmData\fP"
.br
.ti -1c
.RI "\fBQCPRange\fP \fBmDataBounds\fP"
.br
.ti -1c
.RI "bool \fBmDataModified\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBQCPColorMap\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Holds the two-dimensional data of a \fBQCPColorMap\fP plottable\&. 

This class is a data storage for \fBQCPColorMap\fP\&. It holds a two-dimensional array, which \fBQCPColorMap\fP then displays as a 2D image in the plot, where the array values are represented by a color, depending on the value\&.
.PP
The size of the array can be controlled via \fBsetSize\fP (or \fBsetKeySize\fP, \fBsetValueSize\fP)\&. Which plot coordinates these cells correspond to can be configured with \fBsetRange\fP (or \fBsetKeyRange\fP, \fBsetValueRange\fP)\&.
.PP
The data cells can be accessed in two ways: They can be directly addressed by an integer index with \fBsetCell\fP\&. This is the fastest method\&. Alternatively, they can be addressed by their plot coordinate with \fBsetData\fP\&. plot coordinate to cell index transformations and vice versa are provided by the functions \fBcoordToCell\fP and \fBcellToCoord\fP\&.
.PP
This class also buffers the minimum and maximum values that are in the data set, to provide \fBQCPColorMap::rescaleDataRange\fP with the necessary information quickly\&. Setting a cell to a value that is greater than the current maximum increases this maximum to the new value\&. However, setting the cell that currently holds the maximum value to a smaller value doesn't decrease the maximum again, because finding the true new maximum would require going through the entire data array, which might be time consuming\&. The same holds for the data minimum\&. This functionality is given by \fBrecalculateDataBounds\fP, such that you can decide when it is sensible to find the true current minimum and maximum\&. The method \fBQCPColorMap::rescaleDataRange\fP offers a convenience parameter \fIrecalculateDataBounds\fP which may be set to true to automatically call \fBrecalculateDataBounds\fP internally\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPColorMapData::QCPColorMapData (int keySize, int valueSize, const \fBQCPRange\fP & keyRange, const \fBQCPRange\fP & valueRange)"
Constructs a new \fBQCPColorMapData\fP instance\&. The instance has \fIkeySize\fP cells in the key direction and \fIvalueSize\fP cells in the value direction\&. These cells will be displayed by the \fBQCPColorMap\fP at the coordinates \fIkeyRange\fP and \fIvalueRange\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetSize\fP, \fBsetKeySize\fP, \fBsetValueSize\fP, \fBsetRange\fP, \fBsetKeyRange\fP, \fBsetValueRange\fP 
.RE
.PP

.SS "QCPColorMapData::QCPColorMapData (const \fBQCPColorMapData\fP & other)"
Constructs a new \fBQCPColorMapData\fP instance copying the data and range of \fIother\fP\&. 
.SH "Member Function Documentation"
.PP 
.SS "void QCPColorMapData::cellToCoord (int keyIndex, int valueIndex, double * key, double * value) const"
Transforms cell indices given by \fIkeyIndex\fP and \fIvalueIndex\fP to cell indices of this \fBQCPColorMapData\fP instance\&. The resulting coordinates are returned via the output parameters \fIkey\fP and \fIvalue\fP\&.
.PP
If you are only interested in a key or value coordinate, you may pass 0 as \fIkey\fP or \fIvalue\fP\&.
.PP
\fBNote:\fP
.RS 4
The \fBQCPColorMap\fP always displays the data at equal key/value intervals, even if the key or value axis is set to a logarithmic scaling\&. If you want to use \fBQCPColorMap\fP with logarithmic axes, you shouldn't use the \fBQCPColorMapData::cellToCoord\fP method as it uses a linear transformation to determine the cell index\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcoordToCell\fP, \fBQCPAxis::pixelToCoord\fP 
.RE
.PP

.SS "void QCPColorMapData::clear ()"
Frees the internal data memory\&.
.PP
This is equivalent to calling \fBsetSize(0, 0)\fP\&. 
.SS "void QCPColorMapData::coordToCell (double key, double value, int * keyIndex, int * valueIndex) const"
Transforms plot coordinates given by \fIkey\fP and \fIvalue\fP to cell indices of this \fBQCPColorMapData\fP instance\&. The resulting cell indices are returned via the output parameters \fIkeyIndex\fP and \fIvalueIndex\fP\&.
.PP
The retrieved key/value cell indices can then be used for example with \fBsetCell\fP\&.
.PP
If you are only interested in a key or value index, you may pass 0 as \fIvalueIndex\fP or \fIkeyIndex\fP\&.
.PP
\fBNote:\fP
.RS 4
The \fBQCPColorMap\fP always displays the data at equal key/value intervals, even if the key or value axis is set to a logarithmic scaling\&. If you want to use \fBQCPColorMap\fP with logarithmic axes, you shouldn't use the \fBQCPColorMapData::coordToCell\fP method as it uses a linear transformation to determine the cell index\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcellToCoord\fP, \fBQCPAxis::coordToPixel\fP 
.RE
.PP

.SS "void QCPColorMapData::fill (double z)"
Sets all cells to the value \fIz\fP\&. 
.SS "bool QCPColorMapData::isEmpty () const\fC [inline]\fP"
Returns whether this instance carries no data\&. This is equivalent to having a size where at least one of the dimensions is 0 (see \fBsetSize\fP)\&. 
.SS "\fBQCPColorMapData\fP & QCPColorMapData::operator= (const \fBQCPColorMapData\fP & other)"
Overwrites this color map data instance with the data stored in \fIother\fP\&. 
.SS "void QCPColorMapData::recalculateDataBounds ()"
Goes through the data and updates the buffered minimum and maximum data values\&.
.PP
Calling this method is only advised if you are about to call \fBQCPColorMap::rescaleDataRange\fP and can not guarantee that the cells holding the maximum or minimum data haven't been overwritten with a smaller or larger value respectively, since the buffered maximum/minimum values have been updated the last time\&. Why this is the case is explained in the class description (\fBQCPColorMapData\fP)\&.
.PP
Note that the method \fBQCPColorMap::rescaleDataRange\fP provides a parameter \fIrecalculateDataBounds\fP for convenience\&. Setting this to true will call this method for you, before doing the rescale\&. 
.SS "void QCPColorMapData::setCell (int keyIndex, int valueIndex, double z)"
Sets the data of the cell with indices \fIkeyIndex\fP and \fIvalueIndex\fP to \fIz\fP\&. The indices enumerate the cells starting from zero, up to the map's size-1 in the respective dimension (see \fBsetSize\fP)\&.
.PP
In the standard plot configuration (horizontal key axis and vertical value axis, both not range-reversed), the cell with indices (0, 0) is in the bottom left corner and the cell with indices (keySize-1, valueSize-1) is in the top right corner of the color map\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetData\fP, \fBsetSize\fP 
.RE
.PP

.SS "void QCPColorMapData::setData (double key, double value, double z)"
Sets the data of the cell, which lies at the plot coordinates given by \fIkey\fP and \fIvalue\fP, to \fIz\fP\&.
.PP
\fBNote:\fP
.RS 4
The \fBQCPColorMap\fP always displays the data at equal key/value intervals, even if the key or value axis is set to a logarithmic scaling\&. If you want to use \fBQCPColorMap\fP with logarithmic axes, you shouldn't use the \fBQCPColorMapData::setData\fP method as it uses a linear transformation to determine the cell index\&. Rather directly access the cell index with \fBQCPColorMapData::setCell\fP\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetCell\fP, \fBsetRange\fP 
.RE
.PP

.SS "void QCPColorMapData::setKeyRange (const \fBQCPRange\fP & keyRange)"
Sets the coordinate range the data shall be distributed over in the key dimension\&. Together with the value range, This defines the rectangular area covered by the color map in plot coordinates\&.
.PP
The outer cells will be centered on the range boundaries given to this function\&. For example, if the key size (\fBsetKeySize\fP) is 3 and \fIkeyRange\fP is set to \fC\fBQCPRange(2, 3)\fP\fP there will be cells centered on the key coordinates 2, 2\&.5 and 3\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetRange\fP, \fBsetValueRange\fP, \fBsetSize\fP 
.RE
.PP

.SS "void QCPColorMapData::setKeySize (int keySize)"
Resizes the data array to have \fIkeySize\fP cells in the key dimension\&.
.PP
The current data is discarded and the map cells are set to 0, unless the map had already the requested size\&.
.PP
Setting \fIkeySize\fP to zero frees the internal data array and \fBisEmpty\fP returns true\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetKeyRange\fP, \fBsetSize\fP, \fBsetValueSize\fP 
.RE
.PP

.SS "void QCPColorMapData::setRange (const \fBQCPRange\fP & keyRange, const \fBQCPRange\fP & valueRange)"
Sets the coordinate ranges the data shall be distributed over\&. This defines the rectangular area covered by the color map in plot coordinates\&.
.PP
The outer cells will be centered on the range boundaries given to this function\&. For example, if the key size (\fBsetKeySize\fP) is 3 and \fIkeyRange\fP is set to \fC\fBQCPRange(2, 3)\fP\fP there will be cells centered on the key coordinates 2, 2\&.5 and 3\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetSize\fP 
.RE
.PP

.SS "void QCPColorMapData::setSize (int keySize, int valueSize)"
Resizes the data array to have \fIkeySize\fP cells in the key dimension and \fIvalueSize\fP cells in the value dimension\&.
.PP
The current data is discarded and the map cells are set to 0, unless the map had already the requested size\&.
.PP
Setting at least one of \fIkeySize\fP or \fIvalueSize\fP to zero frees the internal data array and \fBisEmpty\fP returns true\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetRange\fP, \fBsetKeySize\fP, \fBsetValueSize\fP 
.RE
.PP

.SS "void QCPColorMapData::setValueRange (const \fBQCPRange\fP & valueRange)"
Sets the coordinate range the data shall be distributed over in the value dimension\&. Together with the key range, This defines the rectangular area covered by the color map in plot coordinates\&.
.PP
The outer cells will be centered on the range boundaries given to this function\&. For example, if the value size (\fBsetValueSize\fP) is 3 and \fIvalueRange\fP is set to \fC\fBQCPRange(2, 3)\fP\fP there will be cells centered on the value coordinates 2, 2\&.5 and 3\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetRange\fP, \fBsetKeyRange\fP, \fBsetSize\fP 
.RE
.PP

.SS "void QCPColorMapData::setValueSize (int valueSize)"
Resizes the data array to have \fIvalueSize\fP cells in the value dimension\&.
.PP
The current data is discarded and the map cells are set to 0, unless the map had already the requested size\&.
.PP
Setting \fIvalueSize\fP to zero frees the internal data array and \fBisEmpty\fP returns true\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetValueRange\fP, \fBsetSize\fP, \fBsetKeySize\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Voice analyze from the source code\&.
